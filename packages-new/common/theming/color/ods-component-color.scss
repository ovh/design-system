@import './ods-theming-color';
@import '../globals/globals';

/// get a variable that corresponding to the intent or palette and the hue
///
/// @access public
///
/// @param {String} $intent-name [null] - name of color intent like `primary`
/// @param {String} $palette-name [null] - OR name of color palette like `blue`
/// @param {String} $hue - the hue to apply like '500' or '500-contrasted'
/// @return {Variable} - a CSS variable corresponding to the color defined in the theme
@function ods-get-color-variable($intent-name: null, $palette-name: null, $hue, $alpha: 1) {
  @if($intent-name == null and $palette-name == null) {
    @error 'You must set $intent-name or $palette-name at least';
  }
  $name: if($intent-name, $intent-name, $palette-name);

  @if($intent-name and not map-has-key($ods-color-intents, $intent-name)) {
    @if ($DEBUG) {
      @debug ods-get-available-intent-names();
    }
    @error 'the intent name does not exists in ODS theming! $intent-name=#{$intent-name} not in #{ods-get-available-intent-names()}';
  }
  @if($palette-name and not map-has-key($ods-palette-definitions, $palette-name)) {
    @if ($DEBUG) {
      @debug ods-get-available-palette-names();
    }
    @error 'the palette name does not exists in ODS theming! $palette-name=#{$palette-name} not in #{ods-get-available-palette-names()}';
  }

  $color: null;
  @if($alpha != 1) {
    $color: hsla(var(--ods-color-#{$name}-#{$hue}-list), unquote($alpha));
  } @else {
    $color: var(--ods-color-#{$name}-#{$hue});
  }
  @return $color;
}

/// Apply a color property corresponding to the hue for each color palette.
/// This will add the [color=primary] selector for instance.
/// @access public
///
/// @param {String} $hue - the hue to apply like '500' or '500-contrasted'
/// @param {Boolean} $with-and-selector [false] - Indicates if the mixin have to apply an `&` selector or not
///
/// @example scss - set
///   @include ods-one-tone-foreach-theme-color('500') {
///     :host(&) {
///       button {
///         color: $ODS_COLOR;
///       }
///     }
///   }
///
/// // will generate :
/// :host button { color: var(--ods-color-default-500); }
/// :host([color^='primary']) button { color: var(--ods-color-primary-500); }
/// [...]
///
@mixin ods-one-hue-foreach-theme-color($hue, $with-and-selector: false) {
  $and-selector: if($with-and-selector, '&', '');

  // by default, color default
  $color: ods-get-color-variable($intent-name: default, $hue: $hue);
  #{$and-selector}:not([color]) {
    @content($color);
  }

  // else: all defined color intention
  @each $intent-name, $palette-config in $ods-color-intents {
    #{$and-selector}[color^=#{$intent-name}] {
      $color: ods-get-color-variable($intent-name: $intent-name, $hue: $hue);
      @content($color);
    }
  }
}

/// Apply a supplementary color selector corresponding to the hue for each color palette.
/// This will add the `&[color=primary]` selector for instance.
///
/// @param {String} $hue - the hue to apply like '500' or '500-contrasted'
///
/// example scss - dsvg
/// [variant='ghost'] {
///   @include ods-and-one-tone-foreach-theme-color('500') {
///     :host(&) {
///       button {
///         color: $ODS_COLOR;
///       }
///     }
///   }
///  }
///
/// will generate :
/// :host([variant='ghost']) button { color: var(--ods-color-default-500); }
/// :host([variant='ghost'][color^='primary']) button { color: var(--ods-color-primary-500); }
/// [...]
@mixin ods-and-one-hue-foreach-theme-color($hue) {
  @include ods-one-hue-foreach-theme-color($hue, true) using ($color) {
    @content($color);
  }
}

/// Apply multiples colors properties corresponding to given hues for each color intent.
/// This will add the `[color=primary]` selector for instance.
///
/// @access public
/// @param {Map} $hues - the different hues to take into account (key -> value list)
/// @param {String} $hues.[key] - a name, whatever you want
/// @param {String} $hues.[value] - value of the hue like `100`
/// @param {Boolean} $with-and-selector [false] - Indicates if the mixin have to apply an `&` selector or not
///
/// example scss - an example
/// osds-button {
///   @include ods-all-hue-foreach-color-intent((
///     color: '500-contrasted', background-color: '500')) {
///     button {
///       color: map_get($ODS_COLORS, color);
///       background-color: map_get($ODS_COLORS, background-color);
///     }
///   }
/// }
/// will generate :
/// osds-button button {
///   color: var(--ods-color-default-500-contrasted);
///   background-color: var(--ods-color-default-500); }
///
/// osds-button [color^='primary'] button {
///   color: var(--ods-color-primary-500-contrasted);
///   background-color: var(--ods-color-primary-500); }
///
/// [...]
@mixin ods-all-hue-foreach-theme-color($hues, $with-and-selector: false) {
  $and-selector: if($with-and-selector, '&', '');

  // by default, color default
  $colors: ();
  @each $property, $hue in $hues {
    $color: null;
    @if(type-of($hue) == map) {
      $color: ods-get-color-variable($intent-name: default, $hue: map-get($hue, 'tone'), $alpha: map-get($hue, 'alpha'));
    } @else {
      $color: ods-get-color-variable($intent-name: default, $hue: $hue);
    }
    $colors: map-merge($colors, ($property: $color));
  }
  #{$and-selector}:not([color]) {
    @content($colors);
  }

  // else: other defined color intention
  @each $intent-name, $palette-config in $ods-color-intents {
    #{$and-selector}[color^=#{$intent-name}] {
      $colors: ();
      @each $property, $hue in $hues {
        $color: null;
        @if(type-of($hue) == map) {
          $color: ods-get-color-variable($intent-name: $intent-name, $hue: map-get($hue, 'tone'), $alpha: map-get($hue, 'alpha'));
        } @else {
          $color: ods-get-color-variable($intent-name: $intent-name, $hue: $hue);
        }
        $colors: map-merge($colors, ($property: $color));
        @if ($DEBUG) {
          @debug '$color=#{$color}';
          @debug '$colors=';
          @debug $colors;
          @debug '$property=#{$property}';
          @debug '$hue=#{$hue}';
        }
      }

      @content($colors);
    }
  }

}


/// Add a supplementary color selector corresponding to given hues for each color intent.
/// This will add the `&[color=primary]` selector for instance.
///
/// @access public
///
/// @param {Map} $hues - the different hues to take into account (key -> value list)
/// @param {String} $hues.[key] - a name, whatever you want
/// @param {String} $hues.[value] - value of the hue like `100` or object of the hue containing `tone` and `alpha` values
///
/// @see ods-all-hue-foreach-theme-color
@mixin ods-and-all-hue-foreach-theme-color($hues) {
  @include ods-all-hue-foreach-theme-color($hues, true) using ($colors) {
    @content($colors);
  }
}
