@import './ods-typography-definitions';
@import '../globals/globals';

// get a typography property
// @access public
@function ods-get-typography-property($typography-properties, $property) {
  $value: map-get($typography-properties, $property);
  $value: if($property == font-family and $value == null, $value, unquote($value));
  @return $value;
}

// @access private
@mixin ods-typography-to-styles($typography-config, $level, $size) {
  @if ($DEBUG) {
    @debug '$typography-config=', $typography-config, ' $level=#{$level} $size=#{$size}';
  }
  $props: map-get(map-get($typography-config, $level), $size);
  @each $property, $value in $props {
    #{$property}: #{$value};
  }
}

// @require $ods-typography-definitions
// @access private
@function ods-check-wanted-typography-config($level-name, $wanted-typography) {
  @if ($DEBUG) {
    @debug '[ods-check-wanted-typography-config] $level-name=#{$level-name} $wanted-typography=';
    @debug $wanted-typography;
  }

  @if (not map-has-key($ods-typography-definitions, $level-name)) {
    @error 'the $level-name=#{$level-name} is not an ODS typography level';
  }

  $template: map-get($ods-typography-definitions, $level-name);
  @if ($DEBUG) {
    @debug '$level-name=#{$level-name} $template=', $template, '$wanted-typography=', $wanted-typography;
  }

  @if (not $wanted-typography) {
    @error 'you forgot to define the typography for the $level-name=#{$level-name}';
  }

  // check nonexistent props
  @each $size-name, $typography in $wanted-typography {
    @if (not map-has-key($template, $size-name)) {
      @error 'you defined a non existant size=#{$size-name} for the $level-name=#{$level-name}';
    }
    $template-size: map-get($template, $size-name);
    @if ($DEBUG) {
      @debug '$template-size', $template-size;
    }
    @each $property, $value in $typography {
      @if (not map-has-key($template-size, $property)) {
        @error 'you defined a non existent property=#{$property} for size=#{$size-name} for the $level-name=#{$level-name}';
      }
    }
  }

  // check all existent props are ok
  @each $size-name, $typography in $template {
    @if (not map-has-key($wanted-typography, $size-name)) {
      @error 'you forgot to define the size=#{$size-name} for the $level-name=#{$level-name}';
    }
    $wanted-size: map-get($wanted-typography, $size-name);
    @if ($DEBUG) {
      @debug '$wanted-size=', $wanted-size;
    }
    @each $property, $value in $typography {
     @if ($value == true and (not map-has-key($wanted-size, $property))) {
        @error 'you forgot to define the property=#{$property} for size=#{$size-name} for the $level-name=#{$level-name}';
      }
    }
  }

  @return $wanted-typography;
}


// generate a theme typography config.
// It check that if each theme-typography-level corresponds to the theming system.
//
// @access public
// @param {ThemeTypographyLevel} $heading - `heading` level configured by the theme
// @param {ThemeTypographyLevel} $subheading - `subheading` level configured by the theme
// @param {ThemeTypographyLevel} $body - `body` level configured by the theme
// @param {ThemeTypographyLevel} $caption - `caption` level configured by the theme
// @param {ThemeTypographyLevel} $button - `button` level configured by the theme
// @param {ThemeTypographyLevel} $input - `input` level configured by the theme
// @return {TypographyConfig} made of the different `ThemeTypographyLevel`
@function ods-create-typography-config(
  $heading,
  $subheading,
  $body,
  $caption,
  $button
) {
  @return (
    heading: ods-check-wanted-typography-config(heading, $heading),
    subheading: ods-check-wanted-typography-config(subheading, $subheading),
    body: ods-check-wanted-typography-config(body, $body),
    button: ods-check-wanted-typography-config(button, $button),
    caption: ods-check-wanted-typography-config(caption, $caption),
  );
}


// create all base CSS for typography of the page
// @access private
@mixin ods-create-base-typography($typography-config) {

  // generate all classes for the typography
  @each $level-name, $level-definitions in $ods-typography-definitions {
    @if ($DEBUG) {
      @debug '$typography-config=', $typography-config;
    }

    @each $size-name, $size-definitions in $level-definitions {
      .ods-#{$level-name}-#{$size-name} {
        @include ods-typography-to-styles($typography-config, $level-name, $size-name);
      }
    }
  }
}

// @access private
@mixin ods-set-typography-config($typography-config) {

  @each $component-name, $typography-component-config in $typography-config {
    @each $size-name, $typography-config in $typography-component-config {
      @each $property-name, $value in $typography-config {
        $variable: --ods-typography-#{$component-name}-#{$size-name}-#{$property-name};
        #{$variable}: $value;
      }
    }
  }
}

@function ods-get-level-definition($level-name) {
  $typography-definitions: ods-get-typography-definitions();
  $level-definition: map-get($typography-definitions, $level-name);
  @return $level-definition;
}

@function ods-get-typography-properties($level-name, $size-name) {
  $level-definition: ods-get-level-definition($level-name);
  $typography-properties: map-get($level-definition, $size-name);
  @return $typography-properties;
}

@function ods-get-typography-definitions() {
  @return $ods-typography-definitions;
}
