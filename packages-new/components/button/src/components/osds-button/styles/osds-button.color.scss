@import '~@ovhcloud/ods-common-theming/color/ods-component-color';
@import './osds-button.mixins';

@mixin osds-button-theme-color-variant-flat() {

  @include ods-and-all-hue-foreach-theme-color((
    color: '500-contrasted',
    background-color: '500'
  )) using($colors) {
    @include osds-button-on-selected-host() {
      color: map_get($colors, color);
      background-color: map_get($colors, background-color);
    }
  }

  &[contrasted] {
    @include ods-and-all-hue-foreach-theme-color((
      color: '500',
      background-color: '500-contrasted'
    )) using($colors) {
      @include osds-button-on-selected-host() {
        color: map_get($colors, color);
        background-color: map_get($colors, background-color);
      }
    }
  }

  &:not([disabled]) {
    @include ods-and-one-hue-foreach-theme-color('700') using($color) {
      :host(&:hover), :host(&:focus) {
        @include osds-button-on-main-element() {
          background-color: $color;
        }
      }
    }

    &[contrasted] {
      @include ods-and-one-hue-foreach-theme-color('100') using($color) {
        :host(&:hover), :host(&:focus) {
          @include osds-button-on-main-element() {
            background-color: $color;
          }
        }
      }
    }
  }

  &:not([disabled]):active {
    @include ods-and-one-hue-foreach-theme-color('800') using($color) {
      @include osds-button-on-selected-host() {
        background-color: $color;
      }
    }

    &[contrasted] {
      @include ods-and-one-hue-foreach-theme-color('200') using($color) {
        @include osds-button-on-selected-host() {
          background-color: $color;
        }
      }
    }
  }

}


@mixin osds-button-theme-color-variant-stroked() {

  @include osds-button-on-selected-host() {
    background-color: initial;
  }

  @include ods-and-all-hue-foreach-theme-color((
    background-color: '500-contrasted',
    color: '500',
    border-color: '500'
  )) using($colors) {
    @include osds-button-on-selected-host() {
      background-color: map_get($colors, background-color);
      color: map_get($colors, color);
      border-color: map_get($colors, border-color);
    }
  }

  &[contrasted] {
    @include ods-and-all-hue-foreach-theme-color((
      color: '500-contrasted',
      border-color: '500-contrasted'
    )) using($colors) {
      @include osds-button-on-selected-host() {
        background-color: transparent;
        color: map_get($colors, color);
        border-color: map_get($colors, border-color);
      }
    }
  }

  &:not([disabled]) {
    @include ods-and-one-hue-foreach-theme-color('100') using($color) {
      :host(&:hover), :host(&:focus) {
        @include osds-button-on-main-element() {
          background-color: $color;
        }
      }
    }

    &[contrasted] {
      @include ods-and-all-hue-foreach-theme-color((
        background-color: (tone: '100', alpha: '.2'),
        border-color: '100'
      )) using($colors) {
        :host(&:hover), :host(&:focus) {
          @include osds-button-on-main-element() {
            /* TODO Add 20% opacity to the bg-color hsla(193, 100%, 87%, 0.2) */
            background-color: map_get($colors, background-color);
            border-color: map_get($colors, border-color);
          }
        }
      }
    }
  }

  &:not([disabled]):active {
    @include ods-and-one-hue-foreach-theme-color('200') using($color) {
      @include osds-button-on-selected-host() {
        background-color: $color;
      }
    }

    &[contrasted] {
      @include ods-and-all-hue-foreach-theme-color((
        background-color: (tone: '100', alpha: '.5'),
        border-color: '100'
      )) using($colors) {
        @include osds-button-on-selected-host() {
          background-color: map_get($colors, background-color);
          border-color: map_get($colors, border-color);
        }
      }
    }
  }
}


@mixin osds-button-theme-color-variant-ghost() {

  @include osds-button-on-selected-host() {
    background-color: initial;
  }

  @include ods-and-all-hue-foreach-theme-color((
    color: '500',
  )) using($colors) {
    @include osds-button-on-selected-host() {
      color: map_get($colors, color);
    }
  }

  &[contrasted] {
    @include ods-and-all-hue-foreach-theme-color((
      color: '500-contrasted',
    )) using($colors) {
      @include osds-button-on-selected-host() {
        color: map_get($colors, color);
      }
    }
  }

  &:not([disabled]) {
    @include ods-and-one-hue-foreach-theme-color('100') using($color) {
      :host(&:hover), :host(&:focus) {
        @include osds-button-on-main-element() {
          background-color: $color;
        }
      }
    }

    &[contrasted] {
      @include ods-and-all-hue-foreach-theme-color((
        background-color: (tone: '100', alpha: '.2'),
      )) using($colors) {
        :host(&:hover), :host(&:focus) {
          @include osds-button-on-main-element() {
            background-color: map_get($colors, background-color);
          }
        }
      }
    }
  }

  &:not([disabled]):active {
    @include ods-and-one-hue-foreach-theme-color('200') using($color) {
      @include osds-button-on-selected-host() {
        background-color: $color;
      }
    }

    &[contrasted] {
      @include ods-and-all-hue-foreach-theme-color((
        background-color: (tone: '100', alpha: '.5'),
      )) using($colors) {
        @include osds-button-on-selected-host() {
          background-color: map_get($colors, background-color);
        }
      }
    }
  }
}


@mixin osds-button-theme-color() {

  /** base colors */
  :host button {
    border-color: transparent;
  }

  /** disabled colors */
  [disabled] {
    @include osds-button-on-selected-host() {
      opacity: .5;
    }
  }

  /** no variant specified: flat variant colors */
  :not([variant]) {
    @include osds-button-theme-color-variant-flat();
  }
  /** flat variant colors */
  [variant='flat'] {
    @include osds-button-theme-color-variant-flat();
  }
  /** variant is default: flat variant colors */
  [variant='default'] {
    @include osds-button-theme-color-variant-flat();
  }

  /** stroked variant colors */
  [variant='stroked'] {
    @include osds-button-theme-color-variant-stroked();
  }

  /** ghost variant colors */
  [variant='ghost'] {
    @include osds-button-theme-color-variant-ghost();
  }

  :not([disabled]):focus {
    @include osds-button-on-selected-host() {
      outline-color: var(--ods-color-gray-500);
    }
  }

  :not([disabled])[contrasted]:focus {
    @include osds-button-on-selected-host() {
      outline-color: var(--ods-color-gray-000);
    }
  }

}
