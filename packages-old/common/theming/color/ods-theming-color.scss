@import 'ods-palette-definitions';
@import 'ods-color-intents';
@import '../globals/globals';

/// get the list of available palettes names inside the ODS theming system
/// @access private
@function ods-get-available-palette-names() {
  $palette-name-list: '';

  @each $palette-name, $palette-definition in $ods-palette-definitions {
    $palette-name-list: '#{$palette-name-list}#{$palette-name}, ';
  }
  @return $palette-name-list;
}

/// get the list of available intent names inside the ODS theming system
/// @access private
@function ods-get-available-intent-names() {
  $intent-name-list: '';

  @each $intent-name, $variable-intent in $ods-color-intents {
    $intent-name-list: '#{$intent-name-list}#{$intent-name}, ';
  }
  @return $intent-name-list;
}

/// check the configured palettes of the theme.
/// It check if all the palette name and hues exists in the theming system
/// @access private
@function ods-check-theme-palettes($theme-palettes) {
  @each $palette-name, $palette-definition in $ods-palette-definitions {
    @if (map_has-key($theme-palettes, $palette-name) == false) {
      @error 'You forgot to define a palette from ODS theming! $palette-name=#{$palette-name}';
    }

    $theme-palette: map_get($theme-palettes, $palette-name);
    @each $hue-name, $color-variable in map-get($ods-palette-definitions, $palette-name) {
      @if (map_has-key($theme-palette, $hue-name) == false) {
        @error 'You forgot to define a hue in theme palette from ODS theming! $palette-name=#{$palette-name} $hue-name=#{$hue-name}';
      }
    }
  }
  @return '';
}

/// @require $ods-palette-definitions
/// @access private
@mixin ods-set-color-config($color-config) {
  $theme-palettes: map-get($color-config, theme-palettes);

  @include ods-create-all-hsla-colors($theme-palettes);

  /** create variables with the color intention */
  $intents: map-get($color-config, intents);
  @each $intent-name, $palette-name in $intents {
    $ods-palette: map-get($ods-palette-definitions, $palette-name);
    @each $hue, $color in $ods-palette {
      $variable: --ods-color-#{$intent-name}-#{$hue};
      @if ($DEBUG) {
        @debug "create variable #{$variable}";
      }

      @include ods-create-hsla-color($intent-name, $hue, map-get(map-get($theme-palettes, $palette-name), $hue));
    }
  }
}

/// generate a theme color config.
/// It check that if the theme-palettes corresponds to the theming system.
///
/// @access public
/// @param {ThemePalettes} $theme-palettes - Colors of the different palettes set by the theme
/// @param {String} $default - palette name used for the default color intent
/// @param {String} $primary - palette name used for the primary color intent
/// @param {String} $text - palette name used for the text color intent
/// @param {String} $accent - palette name used for the accent color intent
/// @param {String} $error - palette name used for the error color intent
/// @param {String} $warning - palette name used for the warning color intent
/// @param {String} $success - palette name used for the success color intent
/// @param {String} $info - palette name used for the info color intent
/// @param {String} $promotion - palette name used for the promotion color intent
/// @return {ColorConfig} made of theme-palettes and intents
@function ods-create-color-config(
  $theme-palettes,
  $default,
  $primary,
  $text,
  $accent,
  $error,
  $warning,
  $success,
  $info,
  $promotion
) {
  $dummy: ods-check-theme-palettes($theme-palettes);
  @return (
    theme-palettes: $theme-palettes,
    intents: (
      default: $default,
      primary: $primary,
      text: $text,
      accent: $accent,
      error: $error,
      warning: $warning,
      success: $success,
      info: $info,
      promotion: $promotion)
  )
}

@function ods-get-theme-color-palette-name($color-config, $color-name) {
  @return map-get(map-get($color-config, $color-name), palette-name);
}

/// get a color variable from a palette color definitions like the `gray` one
/// @access private
@function ods-get-color-variable-of-palette-color-definitions($palette-color-definitions, $hue: default) {
  $color: map-get($palette-color-definitions, $hue);
  @return $color;
}

/// Creates all CSS variables corresponding to a palette
/// @access private
@mixin ods-create-all-hsla-colors($theme-palettes) {
  @each $palette-name, $hues in $theme-palettes {
    @each $hue, $color in $hues {
      @include ods-create-hsla-color(
          $palette-name,
          $hue,
          $color
      )
    }
  }
}

/// Creates multiple CSS variables containing the destructured and assembled HSLA color
/// @access private
@mixin ods-create-hsla-color($palette-name, $hue, $hsla-color) {
  $variable: --ods-color-#{$palette-name}-#{$hue};
  #{$variable}: unquote('hsla(#{hue($hsla-color)}, #{saturation($hsla-color)}, #{lightness($hsla-color)}, #{alpha($hsla-color)})');
  #{$variable}-list: #{hue($hsla-color)}, #{saturation($hsla-color)}, #{lightness($hsla-color)};
}

/// check if the given $hue exists at least in one palette used by the color config of the theme.
/// it stops the compilation if this hue is not found.
@function ods-check-at-least-one-defined-color-for-tone($color-config, $hue) {
  $isAtLeastOneDefinedColor: false;
  $used-palette-name-list: '';

  @each $color-name, $palette-config in $color-config {

    $palette-name: ods-get-theme-color-palette-name($color-config, $color-name);
    $definedColor: ods-get-color-variable-of-palette-color-definitions(map-get($ods-palette-definitions, $palette-name), $hue);

    $used-palette-name-list: '#{$used-palette-name-list}#{$color-name}: #{$palette-name}, ';
    @if ($definedColor != null) {
      $isAtLeastOneDefinedColor: true;
    }
  }

  @if ($isAtLeastOneDefinedColor == false) {
    @error "No color found for the hue in color-config for the used palettes of the theme ! $hue=#{$hue} $used-palette-name-list=#{$used-palette-name-list}";
  }

  @return true;
}
