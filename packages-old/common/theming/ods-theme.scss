@import './color/ods-theming-color';
@import './reset/ods-theming-reset';
@import './size/ods-theming-size';
@import './typography/ods-theming-typography';

// global mixin to call to generate a theme.
// have to be used inside the application.
// it defines all the variables for the theme.
// it define useful classes with the main selector `.ods-theme` to avoid collision :
// - the CSS reset
// - typography useful classes like .ods-title-xs
//
// @param {ThemeConfig} $theme-config - the configuration of the theme
@mixin ods-theme($theme-config) {
  $color-config: map-get($theme-config, color-config);
  $size-config: map-get($theme-config, size-config);
  $typography-config: map-get($theme-config, typography-config);

  // set here common CSS for all themes

  // declaring all the CSS variables into root
  :root {
    @include ods-set-color-config($color-config);
    @include ods-set-size-config($size-config);
    @include ods-set-typography-config($typography-config);
  }


  // ods-theme class must be declared on client side to enable
  // the use of CSS reset or useful typography classes
  .ods-theme {

    @include ods-reset();
    @include ods-create-base-typography($typography-config);

    // set the passed content with the components theming stuff
    @content;
  }
}

// global mixin to call for each component that using the theming system.
// it is preferred to have a shadow dom in order to avoid collision with the application.
// It reset the CSS and set the wanted content
@mixin ods-theme-component() {
  @include ods-reset();
  @content;
}
