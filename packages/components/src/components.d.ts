/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ODS_THEME_COLOR_INTENT } from "@ovhcloud/ods-common-theming";
import { ODS_ACCORDION_SIZE } from "./accordion/src/components/osds-accordion/constants/accordion-size";
import { OsdsAccordion } from "./accordion/src/components/osds-accordion/osds-accordion";
import { OdsBreadcrumbAttributeItem } from "./breadcrumb/src/components/osds-breadcrumb/interfaces/attributes";
import { ODS_ICON_NAME } from "./icon/src";
import { ODS_LINK_REFERRER_POLICY } from "./link/src";
import { ODS_COUNTRY_ISO_CODE, ODS_LOCALE, ODS_PERIOD_ISO_CODE, OdsErrorStateControl, OdsFormControl, OdsFormForbiddenValues, OdsHTMLAnchorElementRel, OdsHTMLAnchorElementTarget, OdsI18nHook, OdsInputValue, OdsTextAreaValidityState, OdsValidityState } from "@ovhcloud/ods-common-core";
import { OdsBreadcrumbAttributeItem as OdsBreadcrumbAttributeItem1 } from "./breadcrumb/src/components/osds-breadcrumb/public-api";
import { ODS_BUTTON_SIZE } from "./button/src/components/osds-button/constants/button-size";
import { ODS_BUTTON_TYPE } from "./button/src/components/osds-button/constants/button-type";
import { ODS_BUTTON_VARIANT } from "./button/src/components/osds-button/constants/button-variant";
import { ODS_BUTTON_TEXT_ALIGN } from "./button/src/components/osds-button/constants/button-text-align";
import { ODS_CART_SIZE } from "./cart/src/components/osds-cart/constants/cart-size";
import { ODS_CART_ROUNDED } from "./cart/src/components/osds-cart/constants/cart-rounded";
import { OdsCartManagerFooter, OdsCartManagerSection } from "./cart/src/components/osds-cart-manager/interfaces/attributes";
import { OdsCheckboxAttributeCbk } from "./checkbox/src/components/osds-checkbox/interfaces/attributes";
import { OdsCheckboxCheckedChangeEventDetail, OdsCheckboxFocusChangeEventDetail, OdsCheckboxUpdatingChangeEventDetail } from "./checkbox/src/components/osds-checkbox/interfaces/events";
import { ODS_CHECKBOX_BUTTON_SIZE } from "./checkbox-button/src/components/osds-checkbox-button/constants/ods-checkbox-button-size";
import { ODS_CHIP_SIZE } from "./chip/src/components/osds-chip/constants/chip-size";
import { ODS_CHIP_VARIANT } from "./chip/src/components/osds-chip/constants/chip-variant";
import { ODS_CODE_SIZE } from "./code/src/components/osds-code/constants/code-size";
import { OdsDatagridColumn, OdsDatagridRow } from "./datagrid/src/components/osds-datagrid/interfaces/attributes";
import { ODS_DATEPICKER_DAY } from "./datepicker/src/components/osds-datepicker/constants/datepicker-day";
import { ODS_DATEPICKER_LOCALE } from "./datepicker/src/components/osds-datepicker/constants/datepicker-locale";
import { OdsDatepickerValueChangeEventDetail } from "./datepicker/src/components/osds-datepicker/interfaces/events";
import { ODS_DIVIDER_SIZE } from "./divider/src/components/osds-divider/constants/divider-size";
import { ODS_FLAG_ISO_CODE_UNION } from "./flag/src/components/osds-flag/constants/flag-iso-code";
import { ODS_ICON_NAME as ODS_ICON_NAME1 } from "./icon/src/components/osds-icon/constants/icon-name";
import { ODS_ICON_SIZE } from "./icon/src/components/osds-icon/constants/icon-size";
import { OdsInputValidityState } from "./input/src/components/osds-input/interfaces/attributes";
import { ODS_INPUT_SIZE } from "./input/src/components/osds-input/constants/input-size";
import { ODS_INPUT_TYPE } from "./input/src/components/osds-input/constants/input-type";
import { OdsInputValueChangeEventDetail } from "./input/src/components/osds-input/interfaces/events";
import { ODS_LINK_REFERRER_POLICY as ODS_LINK_REFERRER_POLICY1 } from "./link/src/components/osds-link/constants/referrer-policies";
import { ODS_MESSAGE_TYPE } from "./message/src/components/osds-message/constants/message-type";
import { ODS_PAGINATION_PER_PAGE } from "./pagination/src/components/osds-pagination/constants/pagination-per-page";
import { OdsPaginationChangedEventDetail, OdsPaginationItemPerPageChangedEventDetail } from "./pagination/src/components/osds-pagination/interfaces/events";
import { ODS_INPUT_SIZE as ODS_INPUT_SIZE1, OdsInputValueChangeEventDetail as OdsInputValueChangeEventDetail1 } from "./input/src";
import { ODS_PHONE_NUMBER_COUNTRY_PRESET } from "./phone-number/src/components/osds-phone-number/constants/phone-number-countries";
import { OdsPhoneNumberValueChangeEventDetail } from "./phone-number/src/components/osds-phone-number/interfaces/events";
import { OdsRadioCheckedChangeEventDetail, OdsRadioCheckingChangeEventDetail } from "./radio/src/components/osds-radio/interfaces/events";
import { ODS_RADIO_BUTTON_SIZE } from "./radio-button/src/components/osds-radio-button/constants/radio-button-size";
import { OsdsRadio } from "./radio/src/components/osds-radio/osds-radio";
import { OdsRangeValue } from "./range/src/components/osds-range/interfaces/value";
import { OdsRangeValueChangeEventDetail } from "./range/src/components/osds-range/interfaces/events";
import { OdsSearchbarOption } from "./search-bar/src/components/osds-search-bar/interfaces/attributes";
import { ODS_SELECT_SIZE } from "./select/src/components/osds-select/constants/select-size";
import { OdsSelectValueChangeEventDetail } from "./select/src/components/osds-select/interfaces/events";
import { OdsSelectOptionClickEventDetail } from "./select/src/components/osds-select-option/interfaces/events";
import { ODS_SKELETON_SIZE } from "./skeleton/src/components/osds-skeleton/constants/skeleton-size";
import { ODS_SPINNER_MODE } from "./spinner/src/components/osds-spinner/constants/spinner-mode";
import { ODS_SPINNER_SIZE } from "./spinner/src/components/osds-spinner/constants/spinner-size";
import { ODS_SWITCH_VARIANT } from "./switch/src/components/osds-switch/constants/switch-variant";
import { ODS_SWITCH_SIZE } from "./switch/src/components/osds-switch/constants/switch-size";
import { OdsSwitchChangedEventDetail } from "./switch/src/components/osds-switch/interfaces/events";
import { ODS_TABS_SIZE } from "./tabs/src/components/osds-tabs/constants/tabs-size";
import { OdsTabItemSelectEventDetail } from "./tabs/src/components/osds-tab-bar-item/interfaces/events";
import { OdsTabsChangeEventDetail } from "./tabs/src/components/osds-tabs/interfaces/events";
import { ODS_TEXT_COLOR_HUE, ODS_TEXT_COLOR_INTENT } from "./text/src/components/osds-text/constants/text-color";
import { ODS_TEXT_SIZE } from "./text/src/components/osds-text/constants/text-size";
import { ODS_TEXT_LEVEL } from "./text/src/components/osds-text/constants/text-level";
import { ODS_TEXTAREA_SIZE } from "./textarea/src/components/osds-textarea/constants/textarea-size";
import { OdsTextAreaValueChangeEvent } from "./textarea/src/components/osds-textarea/interfaces/events";
import { ODS_TILE_SIZE } from "./tile/src/components/osds-tile/constants/tile-size";
import { ODS_TILE_VARIANT } from "./tile/src/components/osds-tile/constants/tile-variant";
import { ODS_TOOLTIP_VARIANT } from "./tooltip/src/components/osds-tooltip/constants/tooltip-variant";
export { ODS_THEME_COLOR_INTENT } from "@ovhcloud/ods-common-theming";
export { ODS_ACCORDION_SIZE } from "./accordion/src/components/osds-accordion/constants/accordion-size";
export { OsdsAccordion } from "./accordion/src/components/osds-accordion/osds-accordion";
export { OdsBreadcrumbAttributeItem } from "./breadcrumb/src/components/osds-breadcrumb/interfaces/attributes";
export { ODS_ICON_NAME } from "./icon/src";
export { ODS_LINK_REFERRER_POLICY } from "./link/src";
export { ODS_COUNTRY_ISO_CODE, ODS_LOCALE, ODS_PERIOD_ISO_CODE, OdsErrorStateControl, OdsFormControl, OdsFormForbiddenValues, OdsHTMLAnchorElementRel, OdsHTMLAnchorElementTarget, OdsI18nHook, OdsInputValue, OdsTextAreaValidityState, OdsValidityState } from "@ovhcloud/ods-common-core";
export { OdsBreadcrumbAttributeItem as OdsBreadcrumbAttributeItem1 } from "./breadcrumb/src/components/osds-breadcrumb/public-api";
export { ODS_BUTTON_SIZE } from "./button/src/components/osds-button/constants/button-size";
export { ODS_BUTTON_TYPE } from "./button/src/components/osds-button/constants/button-type";
export { ODS_BUTTON_VARIANT } from "./button/src/components/osds-button/constants/button-variant";
export { ODS_BUTTON_TEXT_ALIGN } from "./button/src/components/osds-button/constants/button-text-align";
export { ODS_CART_SIZE } from "./cart/src/components/osds-cart/constants/cart-size";
export { ODS_CART_ROUNDED } from "./cart/src/components/osds-cart/constants/cart-rounded";
export { OdsCartManagerFooter, OdsCartManagerSection } from "./cart/src/components/osds-cart-manager/interfaces/attributes";
export { OdsCheckboxAttributeCbk } from "./checkbox/src/components/osds-checkbox/interfaces/attributes";
export { OdsCheckboxCheckedChangeEventDetail, OdsCheckboxFocusChangeEventDetail, OdsCheckboxUpdatingChangeEventDetail } from "./checkbox/src/components/osds-checkbox/interfaces/events";
export { ODS_CHECKBOX_BUTTON_SIZE } from "./checkbox-button/src/components/osds-checkbox-button/constants/ods-checkbox-button-size";
export { ODS_CHIP_SIZE } from "./chip/src/components/osds-chip/constants/chip-size";
export { ODS_CHIP_VARIANT } from "./chip/src/components/osds-chip/constants/chip-variant";
export { ODS_CODE_SIZE } from "./code/src/components/osds-code/constants/code-size";
export { OdsDatagridColumn, OdsDatagridRow } from "./datagrid/src/components/osds-datagrid/interfaces/attributes";
export { ODS_DATEPICKER_DAY } from "./datepicker/src/components/osds-datepicker/constants/datepicker-day";
export { ODS_DATEPICKER_LOCALE } from "./datepicker/src/components/osds-datepicker/constants/datepicker-locale";
export { OdsDatepickerValueChangeEventDetail } from "./datepicker/src/components/osds-datepicker/interfaces/events";
export { ODS_DIVIDER_SIZE } from "./divider/src/components/osds-divider/constants/divider-size";
export { ODS_FLAG_ISO_CODE_UNION } from "./flag/src/components/osds-flag/constants/flag-iso-code";
export { ODS_ICON_NAME as ODS_ICON_NAME1 } from "./icon/src/components/osds-icon/constants/icon-name";
export { ODS_ICON_SIZE } from "./icon/src/components/osds-icon/constants/icon-size";
export { OdsInputValidityState } from "./input/src/components/osds-input/interfaces/attributes";
export { ODS_INPUT_SIZE } from "./input/src/components/osds-input/constants/input-size";
export { ODS_INPUT_TYPE } from "./input/src/components/osds-input/constants/input-type";
export { OdsInputValueChangeEventDetail } from "./input/src/components/osds-input/interfaces/events";
export { ODS_LINK_REFERRER_POLICY as ODS_LINK_REFERRER_POLICY1 } from "./link/src/components/osds-link/constants/referrer-policies";
export { ODS_MESSAGE_TYPE } from "./message/src/components/osds-message/constants/message-type";
export { ODS_PAGINATION_PER_PAGE } from "./pagination/src/components/osds-pagination/constants/pagination-per-page";
export { OdsPaginationChangedEventDetail, OdsPaginationItemPerPageChangedEventDetail } from "./pagination/src/components/osds-pagination/interfaces/events";
export { ODS_INPUT_SIZE as ODS_INPUT_SIZE1, OdsInputValueChangeEventDetail as OdsInputValueChangeEventDetail1 } from "./input/src";
export { ODS_PHONE_NUMBER_COUNTRY_PRESET } from "./phone-number/src/components/osds-phone-number/constants/phone-number-countries";
export { OdsPhoneNumberValueChangeEventDetail } from "./phone-number/src/components/osds-phone-number/interfaces/events";
export { OdsRadioCheckedChangeEventDetail, OdsRadioCheckingChangeEventDetail } from "./radio/src/components/osds-radio/interfaces/events";
export { ODS_RADIO_BUTTON_SIZE } from "./radio-button/src/components/osds-radio-button/constants/radio-button-size";
export { OsdsRadio } from "./radio/src/components/osds-radio/osds-radio";
export { OdsRangeValue } from "./range/src/components/osds-range/interfaces/value";
export { OdsRangeValueChangeEventDetail } from "./range/src/components/osds-range/interfaces/events";
export { OdsSearchbarOption } from "./search-bar/src/components/osds-search-bar/interfaces/attributes";
export { ODS_SELECT_SIZE } from "./select/src/components/osds-select/constants/select-size";
export { OdsSelectValueChangeEventDetail } from "./select/src/components/osds-select/interfaces/events";
export { OdsSelectOptionClickEventDetail } from "./select/src/components/osds-select-option/interfaces/events";
export { ODS_SKELETON_SIZE } from "./skeleton/src/components/osds-skeleton/constants/skeleton-size";
export { ODS_SPINNER_MODE } from "./spinner/src/components/osds-spinner/constants/spinner-mode";
export { ODS_SPINNER_SIZE } from "./spinner/src/components/osds-spinner/constants/spinner-size";
export { ODS_SWITCH_VARIANT } from "./switch/src/components/osds-switch/constants/switch-variant";
export { ODS_SWITCH_SIZE } from "./switch/src/components/osds-switch/constants/switch-size";
export { OdsSwitchChangedEventDetail } from "./switch/src/components/osds-switch/interfaces/events";
export { ODS_TABS_SIZE } from "./tabs/src/components/osds-tabs/constants/tabs-size";
export { OdsTabItemSelectEventDetail } from "./tabs/src/components/osds-tab-bar-item/interfaces/events";
export { OdsTabsChangeEventDetail } from "./tabs/src/components/osds-tabs/interfaces/events";
export { ODS_TEXT_COLOR_HUE, ODS_TEXT_COLOR_INTENT } from "./text/src/components/osds-text/constants/text-color";
export { ODS_TEXT_SIZE } from "./text/src/components/osds-text/constants/text-size";
export { ODS_TEXT_LEVEL } from "./text/src/components/osds-text/constants/text-level";
export { ODS_TEXTAREA_SIZE } from "./textarea/src/components/osds-textarea/constants/textarea-size";
export { OdsTextAreaValueChangeEvent } from "./textarea/src/components/osds-textarea/interfaces/events";
export { ODS_TILE_SIZE } from "./tile/src/components/osds-tile/constants/tile-size";
export { ODS_TILE_VARIANT } from "./tile/src/components/osds-tile/constants/tile-variant";
export { ODS_TOOLTIP_VARIANT } from "./tooltip/src/components/osds-tooltip/constants/tooltip-variant";
export namespace Components {
    interface OsdsAccordion {
        /**
          * main color: see component principles
          * @see OdsAccordionAttributes.color
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * contrasted or not: see component principles
          * @see OdsAccordionAttributes.contrasted
         */
        "contrasted"?: boolean;
        /**
          * disabled: see component principles
          * @see OdsAccordionAttributes.disabled
         */
        "disabled"?: boolean;
        /**
          * opened or not
          * @see OdsAccordionAttributes.opened
         */
        "opened"?: boolean;
        /**
          * size: see component principles
          * @see OdsAccordionAttributes.size
         */
        "size"?: ODS_ACCORDION_SIZE;
    }
    interface OsdsAccordionGroup {
        /**
          * @see OdsAccordionGroupMethod.registerAccordion
         */
        "registerAccordion": (accordion: OsdsAccordion) => Promise<void>;
        /**
          * @see OdsAccordionGroupMethod.unRegisterAccordion
         */
        "unRegisterAccordion": (accordion: OsdsAccordion) => Promise<void>;
    }
    interface OsdsBreadcrumb {
        /**
          * contrasted or not: see component principles
          * @see OdsBreadcrumbAttributes.contrasted
         */
        "contrasted"?: boolean;
        /**
          * List of breadcrumb items to display
          * @see OdsBreadcrumbAttributes.items
         */
        "items": OdsBreadcrumbAttributeItem[] | string;
    }
    interface OsdsBreadcrumbItem {
        /**
          * contrasted or not: see component principles
          * @see OdsBreadcrumbItemAttribute.contrasted
         */
        "contrasted"?: boolean | undefined;
        /**
          * Item should be disabled or not
          * @see OdsBreadcrumbItemAttribute.disabled
         */
        "disabled"?: boolean | undefined;
        /**
          * Item link to redirect to
          * @see OdsBreadcrumbItemAttribute.href
         */
        "href": string | undefined;
        /**
          * Icon to display
          * @see OdsBreadcrumbItemAttribute.icon
         */
        "icon"?: ODS_ICON_NAME;
        "isCollapsed": boolean;
        "isExpandableItem": boolean;
        "isLast": boolean;
        /**
          * Text to display
          * @see OdsBreadcrumbItemAttribute.label
         */
        "label"?: string;
        /**
          * Link referrer policy
          * @see OdsBreadcrumbItemAttribute.referrerpolicy
         */
        "referrerpolicy"?: ODS_LINK_REFERRER_POLICY;
        /**
          * Link relationship
          * @see OdsBreadcrumbItemAttribute.rel
         */
        "rel"?: OdsHTMLAnchorElementRel;
        /**
          * Link target type Specifies where to open the link
          * @see OdsBreadcrumbItemAttribute.target
         */
        "target"?: OdsHTMLAnchorElementTarget;
    }
    interface OsdsButton {
        /**
          * use a circle shape
          * @see OdsButtonAttributes.circle
         */
        "circle"?: boolean | undefined;
        /**
          * main color: see component principles
          * @see OdsButtonAttributes.color
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * contrasted or not: see component principles
          * @see OdsButtonAttributes.contrasted
         */
        "contrasted"?: boolean | undefined;
        /**
          * disabled or not: see component principles
          * @see OdsButtonAttributes.disabled
         */
        "disabled"?: boolean | undefined;
        /**
          * Button with href as download source
          * @see OdsButtonAttributes.rel
         */
        "download"?: HTMLAnchorElement['download'];
        /**
          * use a button as a link with `<a>` element
          * @see OdsButtonAttributes.href
         */
        "href"?: string;
        /**
          * inline or not: see component principles
          * @see OdsButtonAttributes.inline
         */
        "inline"?: boolean | undefined;
        /**
          * Button with href relationship
          * @see OdsButtonAttributes.rel
         */
        "rel"?: OdsHTMLAnchorElementRel;
        /**
          * size: see component principles
          * @see OdsButtonAttributes.size
         */
        "size"?: ODS_BUTTON_SIZE;
        /**
          * link target if we are in a link-mode (using `href` attribute)
          * @see OdsButtonAttributes.target
         */
        "target"?: OdsHTMLAnchorElementTarget;
        /**
          * type of the vanilla button
          * @see OdsButtonAttributes.textAlign
         */
        "textAlign"?: ODS_BUTTON_TEXT_ALIGN;
        /**
          * @see OdsButtonAttributes.type
         */
        "type"?: ODS_BUTTON_TYPE;
        /**
          * used design aspect
          * @see OdsButtonAttributes.variant
         */
        "variant"?: ODS_BUTTON_VARIANT;
    }
    interface OsdsCart {
        /**
          * is the cart is collapsed (if collapsible)
          * @see OdsCartAttributes.collapsed
         */
        "collapsed"?: boolean;
        /**
          * is the cart can be collapsed in a smaller view
          * @see OdsCartAttributes.collapsible
         */
        "collapsible"?: boolean;
        /**
          * get the number of cart items detected in the DOM
          * @see OdsCartMethods.getItemQuantity
         */
        "getItemQuantity": () => Promise<number>;
        /**
          * full width or not: see component principles
          * @see OdsCartAttributes.inline
         */
        "inline"?: boolean;
        /**
          * Render manually the cart in order to refresh the component.
          * @see OdsCartMethods.refresh
         */
        "refresh": () => Promise<void>;
        /**
          * rounds corners of cart's outer border edge
          * @see OdsCartAttributes.rounded
         */
        "rounded"?: ODS_CART_ROUNDED;
        /**
          * size: see component principles
          * @see OdsCartAttributes.size
         */
        "size"?: ODS_CART_SIZE;
    }
    interface OsdsCartFooter {
    }
    interface OsdsCartFooterItem {
    }
    interface OsdsCartHeader {
        /**
          * @see OdsCartHeaderAttributes.headerTitle
         */
        "headerTitle"?: string;
        /**
          * Render manually the cart header in order to refresh the component.
          * @see OdsCartHeaderMethods.refresh
         */
        "refresh": () => Promise<void>;
    }
    interface OsdsCartItem {
    }
    interface OsdsCartItemOption {
    }
    interface OsdsCartManager {
        /**
          * describe what the footer is made of
          * @see OdsCartManagerAttributes.footer
         */
        "footer"?: OdsCartManagerFooter;
        /**
          * get the number of item flagged as product
          * @see OdsCartManagerMethods.getProductQuantity
         */
        "getProductQuantity": () => Promise<number>;
        /**
          * get the total amount of the cart
          * @see OdsCartManagerMethods.getTotalAmount
         */
        "getTotalAmount": () => Promise<number>;
        /**
          * internationalisation system connector
          * @see OdsCartManagerAttributes.i18n
         */
        "i18n"?: OdsI18nHook;
        /**
          * full width or not: see component principles
          * @see OdsCartManagerAttributes.inline
         */
        "inline"?: boolean;
        /**
          * ISO period code that describe the duration of a periodical payment
          * @see OdsCartManagerAttributes.period
         */
        "period"?: ODS_PERIOD_ISO_CODE;
        /**
          * Sections made of one item and multiple options
          * @see OdsCartManagerAttributes.sections
         */
        "sections": OdsCartManagerSection[];
        /**
          * size: see component principles
          * @see OdsCartManagerAttributes.size
         */
        "size"?: ODS_CART_SIZE;
        /**
          * is the cart display the Value Added Tax
          * @see OdsCartManagerAttributes.vatMode
         */
        "vatMode"?: boolean;
    }
    interface OsdsCartSection {
    }
    interface OsdsCartTotal {
    }
    interface OsdsCheckbox {
        /**
          * afterSave input allows to set a function that returns a promise. It is called after each time an update was performed and allowing to manage pessimistic update strategy
          * @see OdsCheckboxAttribute.afterSave
         */
        "afterSave"?: OdsCheckboxAttributeCbk;
        /**
          * The corresponding aria-label describing its content
          * @see OdsCheckboxAttribute.ariaLabel
         */
        "ariaLabel": string | null;
        /**
          * The id to an external description
          * @see OdsCheckboxAttribute.ariaLabelledby
         */
        "ariaLabelledby"?: string | undefined;
        /**
          * beforeSave input allows to set a function that returns a promise. It is called before each time an update will be performed and allowing to manage pessimistic update strategy
          * @see OdsCheckboxAttribute.beforeSave
         */
        "beforeSave"?: OdsCheckboxAttributeCbk;
        /**
          * The checked status of the checkbox
          * @see OdsCheckboxAttribute.checked
         */
        "checked": boolean;
        /**
          * indicate if the checkbox is entirely disabled. it means no interactions (hover, click, focus, etc)
          * @see OdsCheckboxAttribute.disabled
         */
        "disabled": boolean;
        /**
          * is the checkbox is currently focused
          * @see OdsCheckboxAttribute.hasFocus
         */
        "hasFocus": boolean;
        /**
          * The corresponding label
          * @see OdsCheckboxAttribute.label
         */
        "label"?: string;
        /**
          * name used for the input element. useful for browser and posting forms
          * @see OdsCheckboxAttribute.name
         */
        "name"?: string;
        /**
          * save input allows to set a function that returns a promise. It is called before each time an update is performed and allowing to manage pessimistic update strategy. the checked state will be updated just after the call.
          * @see OdsCheckboxAttribute.save
         */
        "save"?: OdsCheckboxAttributeCbk;
        /**
          * programmatically set the focus on the checkbox. this method has to call OdsCheckboxController.setFocus
          * @see OdsCheckboxMethod.setFocus
         */
        "setFocus": () => Promise<void>;
        /**
          * set the tab index. this method has to call OdsCheckboxController.setTabindex
          * @see OdsCheckboxMethod.setTabindex
         */
        "setTabindex": (index: number) => Promise<void>;
        /**
          * update status indicating if the checked state is being modified. `updating` will be `true` until `beforeSave` or `save` are processed. it is used in `pessimistic` update
          * @see OdsCheckboxAttribute.updating
         */
        "updating": boolean;
        /**
          * Its corresponding value
          * @see OdsCheckboxAttribute.value
         */
        "value": string;
    }
    interface OsdsCheckboxButton {
        /**
          * The checked status of the checkbox button
          * @see OdsCheckboxButtonAttribute.checked
         */
        "checked"?: boolean | undefined;
        /**
          * @see OdsCheckboxButtonAttribute.checking
         */
        "checking"?: boolean | undefined;
        /**
          * The color theme
          * @see OdsCheckboxButtonAttribute.color
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * Prevent the user from clicking on the radio button
          * @see OdsCheckboxButtonAttribute.disabled
         */
        "disabled"?: boolean | undefined;
        /**
          * Display a focus style (only if interactive)
          * @see OdsCheckboxButtonAttribute.hasFocus
         */
        "hasFocus"?: boolean | undefined;
        /**
          * The indeterminate status of the checkbox button (override checked status)
          * @see OdsCheckboxButtonAttribute.indeterminate
         */
        "indeterminate"?: boolean | undefined;
        /**
          * Display an interactive style when clicking or hovering the radio button
          * @see OdsCheckboxButtonAttribute.interactive
         */
        "interactive"?: boolean | undefined;
        /**
          * Size of the radio button
          * @see OdsCheckboxButtonAttribute.label
         */
        "size"?: ODS_CHECKBOX_BUTTON_SIZE;
    }
    interface OsdsChip {
        /**
          * Chip color theme
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * Chip is in contrasterd mode or not
         */
        "contrasted"?: boolean;
        /**
          * Chip is disabled or not
         */
        "disabled"?: boolean;
        /**
          * Chip as inline
         */
        "inline"?: boolean;
        /**
          * If the chip can be removed or not
         */
        "removable"?: boolean;
        /**
          * If the chip can be selected or not
         */
        "selectable"?: boolean;
        /**
          * Chip size
         */
        "size"?: ODS_CHIP_SIZE;
        /**
          * Chip variant
         */
        "variant"?: ODS_CHIP_VARIANT;
    }
    interface OsdsClipboard {
        /**
          * Close the surface
         */
        "closeSurface": () => Promise<void>;
        /**
          * Disabled the input, the focus, and the tooltip
         */
        "disabled"?: boolean;
        /**
          * Indicates if the input is full width or not: see component principles
         */
        "inline"?: boolean;
        /**
          * Input text value
         */
        "value": string;
    }
    interface OsdsCode {
        /**
          * main color: see component principles
          * @see OdsCodeAttributes.color
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * contrasted or not: see component principles
          * @see OdsCodeAttributes.contrasted
         */
        "contrasted"?: boolean | undefined;
        /**
          * size: see component principles
          * @see OdsCodeAttributes.size
         */
        "size"?: ODS_CODE_SIZE;
    }
    interface OsdsCollapsible {
        /**
          * opened or not
         */
        "opened"?: boolean;
    }
    interface OsdsContentAddon {
    }
    interface OsdsDatagrid {
        /**
          * The list of the column
         */
        "columns": OdsDatagridColumn[] | string;
        /**
          * Can you hide columns
         */
        "hasHideableColumns"?: boolean;
        /**
          * Height of the datagrid, in pixel
         */
        "height": number;
        /**
          * List of the hide columns The key need to be according to the column field
         */
        "hideableColumns"?: string[];
        /**
          * The rows can be selected
         */
        "isSelectable"?: boolean;
        /**
          * Text when the datagrid has no rows
         */
        "noResultLabel"?: string;
        /**
          * Height for each row, in pixel
         */
        "rowHeight"?: number;
        /**
          * The list of the rows The key needs to be according to the column field
         */
        "rows": OdsDatagridRow[] | string;
    }
    interface OsdsDatepicker {
        /**
          * Defines if the Datepicker should be clearable or not (displays a clear button)
         */
        "clearable"?: boolean;
        /**
          * Defines the Datepicker's color (see component principles)
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * Defines the Datepicker's disabled dates
         */
        "datesDisabled"?: Date[];
        /**
          * Defines the Datepicker's disabled days of the week (monday, tuesday...)
         */
        "daysOfWeekDisabled"?: ODS_DATEPICKER_DAY[];
        /**
          * Default value of the input
         */
        "defaultValue"?: Date | null;
        /**
          * Defines if the Datepicker should be disabled or not (lower opacity and not interactable)
         */
        "disabled"?: boolean;
        /**
          * Defines if the Datepicker should display an error message
         */
        "error"?: boolean;
        /**
          * Defines which format the Datepicker should be applying (supported formats: https://mymth.github.io/vanillajs-datepicker/#/date-string+format?id=date-format)
         */
        "format"?: string;
        /**
          * Defines if the Datepicker should be displayed inline or not
         */
        "inline"?: boolean;
        /**
          * Defines the locale to use
         */
        "locale"?: ODS_DATEPICKER_LOCALE;
        /**
          * Defines the Datepicker's maximum selectable date
         */
        "maxDate"?: Date | null;
        /**
          * Defines the Datepicker's minimum selectable date
         */
        "minDate"?: Date | null;
        /**
          * Name of the datepicker field
         */
        "name"?: string;
        /**
          * Defines if the Datepicker should display a placeholder message
         */
        "placeholder"?: string;
        /**
          * Defines if the Datepicker should display others month days
         */
        "showSiblingsMonthDays"?: boolean;
        /**
          * Defines the Datepicker's value (Date object)
         */
        "value"?: Date | null;
    }
    interface OsdsDivider {
        /**
          * Divider color theme
          * @see OdsDividerAttributes.color
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * Divider design as contrasted version
          * @see OdsDividerAttributes.contrasted
         */
        "contrasted"?: boolean | undefined;
        /**
          * Divider has a separator or not
          * @see OdsDividerAttributes.separator
         */
        "separator"?: boolean | undefined;
        /**
          * Divider size
          * @see OdsDividerAttributes.size
         */
        "size"?: ODS_DIVIDER_SIZE;
    }
    interface OsdsFlag {
        /**
          * override the `ODS` directory path of the assets. if not set, the configured path in `ODS` will be used.
         */
        "assetPath": string | undefined;
        /**
          * Flag ISO country code
         */
        "iso"?: ODS_FLAG_ISO_CODE_UNION;
        /**
          * allow to lazy load the content only when it's visible
         */
        "lazy": boolean;
        /**
          * override with custom src to the svg file.
         */
        "src": string | undefined;
    }
    interface OsdsFormField {
        /**
          * Indicates if the Form Field shows error or not
          * @see OdsFormFieldAttributes.error
         */
        "error"?: string;
        /**
          * Indicates if the Form Field is full width or not: see component principles
          * @see OdsFormFieldAttributes.inline
         */
        "inline"?: boolean;
    }
    interface OsdsIcon {
        /**
          * Icon ARIA name
         */
        "ariaName": string;
        /**
          * Icon color theme
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * Icon is contrasted or not
         */
        "contrasted"?: boolean;
        /**
          * Icon is hoverabled or not
         */
        "hoverable"?: boolean;
        /**
          * Icon name
         */
        "name"?: ODS_ICON_NAME1;
        /**
          * Icon size
         */
        "size"?: ODS_ICON_SIZE;
    }
    interface OsdsInput {
        "ariaLabel": HTMLElement['ariaLabel'];
        /**
          * ID of the element that labels the input
         */
        "ariaLabelledby"?: string;
        /**
          * empty the value
         */
        "clear": () => Promise<void>;
        /**
          * Ability to clear the input value
         */
        "clearable"?: boolean;
        /**
          * Main color of the input: see component principles
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * Indicates if the input is contrasted or not: see component principles
         */
        "contrasted"?: boolean;
        /**
          * Default value of the input
         */
        "defaultValue": OdsInputValue;
        /**
          * Indicates if the input is disabled or not: see component principles
         */
        "disabled"?: boolean;
        /**
          * Indicates if the input shows error or not
         */
        "error"?: boolean;
        /**
          * Controls the error state of the input
         */
        "errorStateControl"?: OdsErrorStateControl;
        /**
          * List of forbidden values for the input
         */
        "forbiddenValues": OdsFormForbiddenValues<number>;
        /**
          * Control object of the form the input belongs to
         */
        "formControl"?: OdsFormControl<OdsInputValidityState>;
        /**
          * get the validity state
         */
        "getValidity": () => Promise<OdsInputValidityState>;
        /**
          * hide or display the value
         */
        "hide": () => Promise<void>;
        /**
          * Icon to be used in the input field
         */
        "icon"?: ODS_ICON_NAME;
        /**
          * Indicates if the input is inline or not: see component principles
         */
        "inline"?: boolean;
        /**
          * Label of the input field
         */
        "label"?: string;
        /**
          * Indicates if the input is in loading state or not
         */
        "loading"?: boolean;
        /**
          * Indicates if the input is masked or not
         */
        "masked"?: boolean;
        /**
          * Maximum value for the input (type number)
         */
        "max"?: number;
        /**
          * Minimum value for the input (type number)
         */
        "min"?: number;
        /**
          * Name of the input field
         */
        "name"?: string;
        /**
          * Placeholder text for the input
         */
        "placeholder"?: string;
        /**
          * Text before the input value
         */
        "prefixValue": string | undefined;
        /**
          * Indicates if the input is read-only or not
         */
        "readOnly"?: boolean;
        /**
          * Indicates if the input is required or not
         */
        "required"?: boolean;
        /**
          * restore the value to the initial state
         */
        "reset": () => Promise<void>;
        /**
          * active the focus on the input in order to let the user write something
         */
        "setFocus": () => Promise<void>;
        /**
          * set a custom tab index for easier navigation
          * @param value - chosen index
         */
        "setInputTabindex": (value: number) => Promise<void>;
        /**
          * Size of the input: see component principles
         */
        "size"?: ODS_INPUT_SIZE;
        /**
          * Step value for the input
         */
        "step"?: number;
        "stepDown": () => Promise<void>;
        "stepUp": () => Promise<void>;
        /**
          * Type of the input field
         */
        "type": ODS_INPUT_TYPE;
        /**
          * Current value of the input
         */
        "value": OdsInputValue;
    }
    interface OsdsLink {
        /**
          * Link color theme
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * Link design as contrasted version
         */
        "contrasted"?: boolean;
        /**
          * Link should be disabled or not
         */
        "disabled"?: boolean;
        /**
          * Link as download source
         */
        "download"?: HTMLAnchorElement['download'];
        /**
          * Link URL
         */
        "href"?: string;
        /**
          * Link referrer policy
         */
        "referrerpolicy"?: ODS_LINK_REFERRER_POLICY1;
        /**
          * Link relationship
         */
        "rel"?: OdsHTMLAnchorElementRel;
        /**
          * Link target type If href is set the default value `_self` is set
         */
        "target"?: OdsHTMLAnchorElementTarget;
        /**
          * Link type (for download source)
         */
        "type"?: string;
    }
    interface OsdsMedium {
        /**
          * Medium alternative description
         */
        "alt": string;
        /**
          * Medium height in px
         */
        "height"?: number;
        /**
          * Medium url or path
         */
        "src": string;
        /**
          * Medium width in px
         */
        "width"?: number;
    }
    interface OsdsMenu {
        /**
          * Menu is disabled or not
         */
        "disabled"?: boolean;
    }
    interface OsdsMenuGroup {
    }
    interface OsdsMenuItem {
    }
    interface OsdsMessage {
        /**
          * Message color theme
          * @see OdsMessageAttributes.color
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * Message is in contrasted mode or not
          * @see OdsMessageAttributes.contrasted
         */
        "contrasted"?: boolean | undefined;
        /**
          * The icon prefix
          * @see OdsMessageAttributes.icon
         */
        "icon"?: ODS_ICON_NAME;
        /**
          * Message as inline
          * @see OdsMessageAttributes.inline
         */
        "inline"?: boolean | undefined;
        /**
          * If the message can be removed or not
          * @see OdsMessageAttributes.removable
         */
        "removable"?: boolean | undefined;
        /**
          * The message type
          * @see OdsMessageAttributes.type
         */
        "type"?: ODS_MESSAGE_TYPE;
    }
    interface OsdsModal {
        /**
          * close && set display none to the modal
          * @see OdsModalMethods.close
         */
        "close": () => Promise<void>;
        /**
          * Color of the modal's header background
          * @see OdsModalAttributes.color
         */
        "color": ODS_THEME_COLOR_INTENT;
        /**
          * Defines if the modal is dismissible (displays a close button)
          * @see OdsModalAttributes.dismissible
         */
        "dismissible"?: boolean;
        /**
          * Text displayed as the modal's headline
          * @see OdsModalAttributes.headline
         */
        "headline"?: string;
        /**
          * Defines if the modal is masked
          * @see OdsModalAttributes.masked
         */
        "masked"?: boolean;
        /**
          * open && display the modal
          * @see OdsModalMethods.open
         */
        "open": () => Promise<void>;
    }
    interface OsdsPagination {
        /**
          * Its corresponding current page.
         */
        "defaultCurrentPage": number;
        /**
          * Default items per page.
         */
        "defaultItemsPerPage": ODS_PAGINATION_PER_PAGE;
        /**
          * indicates if the pagination is entirely disabled. it means no interactions (hover, click, focus, etc)
         */
        "disabled": boolean;
        "getCurrentPage": () => Promise<number>;
        /**
          * The label of the tooltip on the arrow next
         */
        "labelTooltipNext": string;
        /**
          * The label of the tooltip on the arrow previous
         */
        "labelTooltipPrevious": string;
        /**
          * set page index on the component
          * @see OdsPaginationMethods.setPageIndex
         */
        "setPageIndex": (current: number) => Promise<void>;
        /**
          * The total number of items.
         */
        "totalItems"?: number;
        /**
          * The total amount of pages.
         */
        "totalPages": number;
    }
    interface OsdsPassword {
        /**
          * ariaLabel of the password
         */
        "ariaLabel": HTMLElement['ariaLabel'];
        /**
          * ID of the element that labels the password
         */
        "ariaLabelledby"?: string;
        /**
          * Ability to clear the password value
         */
        "clearable"?: boolean;
        /**
          * Main color of the password: see component principles
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * Indicates if the password is contrasted or not: see component principles
         */
        "contrasted"?: boolean;
        /**
          * Default value of the password
         */
        "defaultValue": string;
        /**
          * Indicates if the password is disabled or not: see component principles
         */
        "disabled"?: boolean;
        /**
          * Indicates if the password shows error or not
         */
        "error"?: boolean;
        /**
          * List of forbidden values for the password
         */
        "forbiddenValues": OdsFormForbiddenValues<number>;
        /**
          * Indicates if the password is inline or not
         */
        "inline"?: boolean;
        /**
          * Label of the password field
         */
        "label"?: string;
        /**
          * Indicates if the password is in loading state or not
         */
        "loading"?: boolean;
        /**
          * Indicates if the password is masked or not
         */
        "masked"?: boolean;
        /**
          * Name of the password field
         */
        "name"?: string;
        /**
          * Placeholder text for the password
         */
        "placeholder"?: string;
        /**
          * Indicates if the password is read-only or not
         */
        "readOnly"?: boolean;
        /**
          * Indicates if the password is required or not
         */
        "required"?: boolean;
        /**
          * Size of the password: see component principles
         */
        "size"?: ODS_INPUT_SIZE1;
        /**
          * Current value of the password
         */
        "value": string;
    }
    interface OsdsPhoneNumber {
        /**
          * Ability to clear the phone number value
         */
        "clearable"?: boolean;
        /**
          * A specific subset of countries to display in the select instead of the whole list
         */
        "countries"?: ODS_COUNTRY_ISO_CODE[] | ODS_PHONE_NUMBER_COUNTRY_PRESET | string;
        /**
          * Default value of the phone number
         */
        "defaultValue": string | null;
        /**
          * Indicates if the phone number is disabled or not
         */
        "disabled"?: boolean;
        /**
          * Indicates if the phone number shows error or not
         */
        "error"?: boolean;
        /**
          * Select value
         */
        "isoCode"?: ODS_COUNTRY_ISO_CODE;
        /**
          * This is the locale to use to translate the countries names
         */
        "locale"?: ODS_LOCALE;
        /**
          * Name of the phone number field
         */
        "name"?: string;
        /**
          * Current value of the phone number
         */
        "value": string | null;
    }
    interface OsdsPopover {
        /**
          * Close the surface
          * @see OdsPopoverMethods.closeSurface
         */
        "closeSurface": () => Promise<void>;
    }
    interface OsdsPopoverContent {
    }
    interface OsdsProgressBar {
        /**
          * Sets the maximum value the progress can reach
          * @see OdsProgressBarAttributes.max
         */
        "max"?: number | undefined;
        /**
          * The value of the progress bar
          * @see OdsProgressBarAttributes.value
         */
        "value"?: number | undefined;
    }
    /**
     * create type that correspond to our input component.
     * doesn't work with :
     * ```
     * // not working
     * import '@ovhcloud/ods-stencil/components/button';
     * // not working
     * import '@ovhcloud/ods-stencil/components/input/dist/types/components';
     * // OK!
     * import { OsdsInput } from '@ovhcloud/ods-stencil/components/input/dist/types';
     * type HTMLOsdsInputElement = (OsdsInput & HTMLElement);
     * ```
     * with this, we cannot build
     * @ovhcloud /ods-components ("Component Tag Name "osds-input" Must Be Unique" error)
     */
    interface OsdsQuantity {
        /**
          * Quantity is disabled or not
         */
        "disabled"?: boolean;
    }
    interface OsdsRadio {
        /**
          * @see OdsRadioAttribute.afterSave
         */
        "afterSave"?: (({ checked, value }: { checked: boolean; value: string; }) => Promise<void>) | undefined;
        /**
          * The corresponding aria-label describing its content
          * @see OdsRadioAttribute.ariaLabel
         */
        "ariaLabel": string | null;
        /**
          * The id to an external description
          * @see OdsRadioAttribute.ariaLabelledby
         */
        "ariaLabelledby"?: string | undefined;
        /**
          * @see OdsRadioAttributes.beforeSave
         */
        "beforeSave"?: (({ checked, value }: { checked: boolean; value: string; }) => Promise<void>) | undefined;
        /**
          * The checked status of the radio
          * @see OdsRadioAttribute.checked
         */
        "checked": boolean;
        /**
          * is in state of awaiting the checked change
          * @see OdsRadioAttributes.checking
         */
        "checking": boolean;
        /**
          * Radio should be disabled or not
          * @see OdsRadioAttribute.disabled
         */
        "disabled": boolean;
        /**
          * The radio corresponding label
          * @see OdsRadioAttribute.label
         */
        "label"?: string;
        /**
          * The name corresponding to its parent radio group
          * @see OdsRadioAttribute.name
         */
        "name"?: string;
        /**
          * save input allow to set a function that returns a promise. It is called before each time an update is performed and allowing to manage pessimistic update strategy
          * @see OdsRadioAttribute.save
         */
        "save"?: (({ checked, value }: { checked: boolean; value: string; }) => Promise<void>) | undefined;
        /**
          * Set the tab index. useful between radio-group and radio
          * @see OdsRadioMethods.setButtonTabindex
         */
        "setButtonTabindex": (value: number) => Promise<void>;
        /**
          * set the focus. useful between radio-group and radio
          * @see OdsRadioMethods.setFocus
         */
        "setFocus": () => Promise<void>;
        /**
          * update the state according to the different attributes (checking, checked, etc). useful between radio-group and radio
          * @see OdsRadioMethods.updateState
         */
        "updateState": (checking?: boolean) => Promise<void>;
        /**
          * Its corresponding value
          * @see OdsRadioAttribute.value
         */
        "value": string;
    }
    interface OsdsRadioButton {
        /**
          * The checked status of the radio button
          * @see OdsRadioButtonAttributes.checked
         */
        "checked"?: boolean | undefined;
        /**
          * @see OdsRadioButtonAttributes.checking
         */
        "checking"?: boolean | undefined;
        /**
          * The color theme
          * @see OdsRadioButtonAttributes.color
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * Prevent the user from clicking on the radio button
          * @see OdsRadioButtonAttributes.disabled
         */
        "disabled"?: boolean | undefined;
        /**
          * Display a focus style (only if interactive)
          * @see OdsRadioButtonAttributes.hasFocus
         */
        "hasFocus"?: boolean | undefined;
        /**
          * Display an interactive style when clicking or hovering the radio button
          * @see OdsRadioButtonAttributes.interactive
         */
        "interactive"?: boolean | undefined;
        /**
          * Size of the radio button
          * @see OdsRadioButtonAttributes.size
         */
        "size"?: ODS_RADIO_BUTTON_SIZE;
    }
    interface OsdsRadioGroup {
        /**
          * @see OdsRadioGroupAttributes.afterSave
         */
        "afterSave"?: (({ value }: { value: string; }) => Promise<void>) | undefined;
        /**
          * @see OdsRadioGroupAttributes.beforeSave
         */
        "beforeSave"?: (({ value }: { value: string; }) => Promise<void>) | undefined;
        /**
          * Radio-group should be disabled or not
          * @see OdsRadioGroupAttributes.disabled
         */
        "disabled": boolean;
        /**
          * @see OdsRadioGroupMethods.getRadios
         */
        "getRadios": () => Promise<OsdsRadio[]>;
        /**
          * @see OdsRadioGroupAttributes.name
         */
        "name": string;
        /**
          * called when a radio component is instanced
          * @see OdsRadioGroupMethods.registerRadio
         */
        "registerRadio": (radio: OsdsRadio) => Promise<void>;
        /**
          * If the radio selection is required or not
          * @see OdsRadioGroupAttributes.required
         */
        "required": boolean | undefined;
        /**
          * save input allow to set a function that returns a promise. It is called before each time an update is performed and allowing to manage pessimistic update strategy
          * @see OdsRadioGroupAttributes.save
         */
        "save"?: (({ value }: { value: string; }) => Promise<void>) | undefined;
        /**
          * called when a radio component is destroyed
          * @see OdsRadioGroupMethods.unregisterRadio
         */
        "unregisterRadio": (radio: OsdsRadio) => Promise<void>;
        /**
          * @see OdsRadioGroupMethods.updateState
         */
        "updateState": ({ newValue, checked, checking }: { newValue: string; checked: boolean; checking: boolean; }) => Promise<void>;
        /**
          * @see OdsRadioGroupAttributes.value
         */
        "value": string;
    }
    interface OsdsRange {
        /**
          * Range color theme
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * Default value of the range
         */
        "defaultValue": OdsRangeValue;
        /**
          * Indicate if the range is entirely disabled. It means no interaction is possible (hover, click, focus, etc)
         */
        "disabled"?: boolean;
        /**
          * If the range is in error or not
         */
        "error"?: boolean;
        /**
          * Check range error state
         */
        "errorStateControl"?: OdsErrorStateControl;
        /**
          * The range forbidden values
         */
        "forbiddenValues": OdsFormForbiddenValues<number>;
        /**
          * The form control for range
         */
        "formControl"?: OdsFormControl<OdsValidityState>;
        "getValidity": () => Promise<OdsValidityState>;
        /**
          * inline unit for range width
         */
        "inline"?: boolean;
        /**
          * The range maximum value
         */
        "max"?: number;
        /**
          * The range minimum value
         */
        "min"?: number;
        /**
          * Name of the range field
         */
        "name"?: string;
        /**
          * The range step value
         */
        "step"?: number;
        /**
          * The range value
         */
        "value": OdsRangeValue;
    }
    interface OsdsSearchBar {
        /**
          * Indicates if the search-bar is contrasted or not: see component principles
         */
        "contrasted"?: boolean;
        /**
          * Indicates if the search-bar is disabled or not: see component principles
         */
        "disabled"?: boolean;
        /**
          * Indicates if the search-bar is in loading state or not
         */
        "loading"?: boolean;
        /**
          * List of the options on the select
         */
        "options"?: OdsSearchbarOption[];
        /**
          * Placeholder text for the search-bar
         */
        "placeholder"?: string;
        /**
          * Current value of the search-bar
         */
        "value": string;
    }
    interface OsdsSelect {
        /**
          * The corresponding aria-label describing its content
         */
        "ariaLabel": string | null;
        /**
          * The id to an external description
         */
        "ariaLabelledby": string;
        /**
          * erase the current selection
         */
        "clear": () => Promise<void>;
        /**
          * the primary color of the theme
         */
        "color": ODS_THEME_COLOR_INTENT;
        /**
          * Its corresponding default value. It needs to match with one option so the option will be selected
         */
        "defaultValue": OdsInputValue;
        /**
          * indicates if the select is entirely disabled. it means no interactions (hover, click, focus, etc)
         */
        "disabled": boolean;
        /**
          * indicates if the select has an error.
         */
        "error": boolean | undefined;
        /**
          * get the validity state
         */
        "getValidity": () => Promise<OdsValidityState>;
        /**
          * full width or not: see component principles
         */
        "inline": boolean;
        /**
          * name of the select field
         */
        "name"?: string;
        /**
          * opened or not
         */
        "opened": boolean;
        /**
          * indicates if a value has to be selected
         */
        "required": boolean;
        /**
          * reset the value to the initial one (default value)
         */
        "reset": () => Promise<void>;
        /**
          * focus the element
         */
        "setFocus": () => Promise<void>;
        /**
          * set tab index on the component
         */
        "setInputTabindex": (value: number) => Promise<void>;
        /**
          * size: see component principles
         */
        "size": ODS_SELECT_SIZE;
        /**
          * check that the select is valid or not. In case of required field, the validation will check the entered value and set the field in error if it is not fulfilled
         */
        "validate": () => Promise<OdsValidityState>;
        /**
          * Its corresponding value. It needs to correspond to the value of the option
         */
        "value": OdsInputValue;
    }
    interface OsdsSelectGroup {
    }
    interface OsdsSelectOption {
        /**
          * get label of the element
          * @see OdsSelectOptionMethods.getLabel
         */
        "getLabel": () => Promise<string>;
        /**
          * Whether or not it is the selected value (fetched from parent). UI only purpose
         */
        "selected"?: boolean;
        /**
          * @see OdsSelectOptionMethods.setTabIndex
         */
        "setTabIndex": (value: number) => Promise<void>;
        "value": OdsInputValue;
    }
    interface OsdsSkeleton {
        /**
          * inline or not: see component principles
         */
        "inline"?: boolean;
        /**
          * whether or not skeleton size is randomized
         */
        "randomized"?: boolean;
        /**
          * skeleton size
         */
        "size"?: ODS_SKELETON_SIZE;
    }
    interface OsdsSpinner {
        /**
          * contrasted or not: see component principles
          * @see OdsSpinnerAttributes.contrasted
         */
        "contrasted"?: boolean;
        /**
          * full width or not: see component principles
          * @see OdsSpinnerAttributes.inline
         */
        "inline"?: boolean;
        /**
          * choose between infinite or progress spinner (infinite only for now)
          * @see OdsSpinnerAttributes.mode
         */
        "mode"?: ODS_SPINNER_MODE;
        /**
          * size: see component principles
          * @see OdsSpinnerAttributes.size
         */
        "size"?: ODS_SPINNER_SIZE;
    }
    interface OsdsSwitch {
        /**
          * main color: see component principles
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * contrasted or not: see component principles
         */
        "contrasted"?: boolean;
        /**
          * disabled: see component principles
         */
        "disabled"?: boolean;
        /**
          * size: see component principles
         */
        "size"?: ODS_SWITCH_SIZE;
        /**
          * used design aspect
         */
        "variant"?: ODS_SWITCH_VARIANT;
    }
    interface OsdsSwitchItem {
        /**
          * The checked status of the SwitchItem
         */
        "checked": boolean;
        "setFocus": () => Promise<void>;
        /**
          * Its corresponding value
         */
        "value": HTMLInputElement['value'];
    }
    /**
     * assemble different item in a bar
     */
    interface OsdsTabBar {
        /**
          * Tabs size
          * @see OdsTabsAttributes.size
         */
        "size"?: ODS_TABS_SIZE;
    }
    /**
     * An Item that is part of the tab bar
     */
    interface OsdsTabBarItem {
        /**
          * is this tab item is selected or not
          * @see OdsTabBarItemAttributes.active
         */
        "active": boolean;
        /**
          * is in contrasted mode or not
          * @see OdsTabBarItemAttributes.contrasted
         */
        "contrasted": boolean;
        /**
          * The tab is disabled or not
          * @see OdsTabBarItemAttributes.disabled
         */
        "disabled": boolean;
        /**
          * The panel of the corresponding Tab
          * @see OdsTabBarItemAttributes.panel
         */
        "panel": string;
        /**
          * select the panel by emitting
          * @see OdsTabBarItemBehavior.select
         */
        "select": () => Promise<void>;
    }
    /**
     * Panel with content that has to be displayed when active
     */
    interface OsdsTabPanel {
        /**
          * is the panel active or not
          * @see OdsTabPanelAttributes.active
         */
        "active": boolean;
        /**
          * identifier name of the panel
          * @see OdsTabPanelAttributes.name
         */
        "name": string;
    }
    /**
     * Main tabs component
     */
    interface OsdsTabs {
        /**
          * The tab is contrasted
          * @see OdsTabsAttributes.contrasted
         */
        "contrasted": boolean;
        /**
          * Tabs active panel
          * @see OdsTabsAttributes.panel
         */
        "panel": string;
        /**
          * Tabs size
          * @see OdsTabsAttributes.size
         */
        "size": ODS_TABS_SIZE;
    }
    interface OsdsText {
        /**
          * If text handles break spaces or not
          * @see OdsTextAttribute.breakSpaces
         */
        "breakSpaces"?: boolean | undefined;
        /**
          * Text contrasted theme
          * @see OdsTextAttribute.color
         */
        "color"?: ODS_TEXT_COLOR_INTENT;
        /**
          * Text design as contrasted version
          * @see OdsTextAttribute.contrasted
         */
        "contrasted"?: boolean | undefined;
        /**
          * Text hue
          * @see OdsTextAttribute.hue
         */
        "hue"?: ODS_TEXT_COLOR_HUE;
        /**
          * Text level
          * @see OdsTextAttribute.level
         */
        "level"?: ODS_TEXT_LEVEL;
        /**
          * Text size
          * @see OdsTextAttribute.size
         */
        "size"?: ODS_TEXT_SIZE;
    }
    interface OsdsTextarea {
        /**
          * ariaLabel: see component principles
         */
        "ariaLabel": HTMLElement['ariaLabel'];
        /**
          * ariaLabelledby: see component principles
         */
        "ariaLabelledby"?: string;
        /**
          * empty the value
         */
        "clear": () => Promise<void>;
        /**
          * main color: see component principles
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * cols: see component principles
         */
        "cols"?: number;
        /**
          * contrasted: see component principles
         */
        "contrasted"?: boolean;
        /**
          * defaultValue: see component principles
         */
        "defaultValue"?: string;
        /**
          * cols: see component principles
         */
        "disabled"?: boolean;
        /**
          * on error or not
         */
        "error"?: boolean;
        "errorStateControl"?: OdsErrorStateControl;
        /**
          * textarea form control
         */
        "formControl"?: OdsFormControl<OdsTextAreaValidityState>;
        /**
          * get the validity state
         */
        "getValidity": () => Promise<OdsTextAreaValidityState>;
        /**
          * inline or not: see component principles
         */
        "inline"?: boolean;
        /**
          * name : see component principles
         */
        "name"?: string;
        /**
          * placeholder : see component principles
         */
        "placeholder"?: string;
        /**
          * readOnly or not : see component principles
         */
        "readOnly"?: boolean;
        /**
          * required or not : see component principles
         */
        "required"?: boolean;
        /**
          * restore the value to the initial state
         */
        "reset": () => Promise<void>;
        /**
          * resizable or not : see component principles
         */
        "resizable"?: boolean;
        /**
          * row: see component principles
         */
        "rows"?: number;
        /**
          * active the focus on the textarea in order to let the user write something
         */
        "setFocus": () => Promise<void>;
        /**
          * set a custom tab index for easier navigation
          * @param value - chosen index
         */
        "setTextAreaTabindex": (value: number) => Promise<void>;
        /**
          * textarea size
         */
        "size"?: ODS_TEXTAREA_SIZE;
        /**
          * spellcheck: see component principles
         */
        "spellcheck": HTMLElement['spellcheck'];
        /**
          * textarea id
         */
        "textAreaId"?: string;
        /**
          * value: see component principles
         */
        "value": string;
    }
    interface OsdsTile {
        /**
          * If the tile is selected or not
         */
        "checked"?: boolean;
        /**
          * awaiting a change of checked state
         */
        "checking"?: boolean;
        /**
          * Tile color theme
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * disabled or not: see component principles
         */
        "disabled"?: boolean;
        /**
          * indicate if the tile has to be displayed in focused state
         */
        "hasFocus"?: boolean;
        /**
          * If the tile can have hoverable pseudo-classes or not
         */
        "hoverable"?: boolean;
        /**
          * inline or not: see component principles
         */
        "inline"?: boolean | undefined;
        /**
          * loading content state
         */
        "loading"?: boolean;
        /**
          * If the tile is rounded or not
         */
        "rounded"?: boolean;
        /**
          * Tile size
         */
        "size"?: ODS_TILE_SIZE;
        /**
          * Tile variant
         */
        "variant"?: ODS_TILE_VARIANT;
    }
    interface OsdsToggle {
        /**
          * Toggle is checked or not
          * @see OdsToggleAttributes.checked
         */
        "checked"?: boolean | undefined;
        /**
          * Awaiting a change of checked state
          * @see OdsToggleAttributes.checking
         */
        "checking"?: boolean | undefined;
        /**
          * Toggle color theme
          * @see OdsToggleAttributes.color
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * Toggle is in contrasted mode or not
          * @see OdsToggleAttributes.contrasted
         */
        "contrasted"?: boolean | undefined;
        /**
          * Toggle is disabled or not
          * @see OdsToggleAttributes.disabled
         */
        "disabled"?: boolean | undefined;
        /**
          * If the toggle can have interactive pseudo-classes or not
          * @see OdsToggleAttributes.interactive
         */
        "interactive"?: boolean | undefined;
    }
    interface OsdsTooltip {
        /**
          * Close the surface
          * @see OdsTooltipMethods.closeSurface
         */
        "closeSurface": () => Promise<void>;
        /**
          * set tab index on the component
          * @see OdsTooltipMethods.setTabindex
         */
        "setTabindex": (value: number) => Promise<void>;
        /**
          * with or without visible tip: see component principles
          * @see OdsTooltipAttributes.variant
         */
        "variant"?: ODS_TOOLTIP_VARIANT;
    }
    interface OsdsTooltipContent {
    }
}
export interface OsdsAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsdsAccordionElement;
}
export interface OsdsBreadcrumbItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsdsBreadcrumbItemElement;
}
export interface OsdsCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsdsCheckboxElement;
}
export interface OsdsChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsdsChipElement;
}
export interface OsdsClipboardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsdsClipboardElement;
}
export interface OsdsCodeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsdsCodeElement;
}
export interface OsdsCollapsibleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsdsCollapsibleElement;
}
export interface OsdsDatagridCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsdsDatagridElement;
}
export interface OsdsDatepickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsdsDatepickerElement;
}
export interface OsdsInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsdsInputElement;
}
export interface OsdsMessageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsdsMessageElement;
}
export interface OsdsModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsdsModalElement;
}
export interface OsdsPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsdsPaginationElement;
}
export interface OsdsPasswordCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsdsPasswordElement;
}
export interface OsdsPhoneNumberCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsdsPhoneNumberElement;
}
export interface OsdsRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsdsRadioElement;
}
export interface OsdsRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsdsRadioGroupElement;
}
export interface OsdsRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsdsRangeElement;
}
export interface OsdsSearchBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsdsSearchBarElement;
}
export interface OsdsSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsdsSelectElement;
}
export interface OsdsSelectOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsdsSelectOptionElement;
}
export interface OsdsSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsdsSwitchElement;
}
export interface OsdsTabBarItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsdsTabBarItemElement;
}
export interface OsdsTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsdsTabsElement;
}
export interface OsdsTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsdsTextareaElement;
}
declare global {
    interface HTMLOsdsAccordionElementEventMap {
        "odsAccordionToggle": boolean;
    }
    interface HTMLOsdsAccordionElement extends Components.OsdsAccordion, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOsdsAccordionElementEventMap>(type: K, listener: (this: HTMLOsdsAccordionElement, ev: OsdsAccordionCustomEvent<HTMLOsdsAccordionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOsdsAccordionElementEventMap>(type: K, listener: (this: HTMLOsdsAccordionElement, ev: OsdsAccordionCustomEvent<HTMLOsdsAccordionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOsdsAccordionElement: {
        prototype: HTMLOsdsAccordionElement;
        new (): HTMLOsdsAccordionElement;
    };
    interface HTMLOsdsAccordionGroupElement extends Components.OsdsAccordionGroup, HTMLStencilElement {
    }
    var HTMLOsdsAccordionGroupElement: {
        prototype: HTMLOsdsAccordionGroupElement;
        new (): HTMLOsdsAccordionGroupElement;
    };
    interface HTMLOsdsBreadcrumbElement extends Components.OsdsBreadcrumb, HTMLStencilElement {
    }
    var HTMLOsdsBreadcrumbElement: {
        prototype: HTMLOsdsBreadcrumbElement;
        new (): HTMLOsdsBreadcrumbElement;
    };
    interface HTMLOsdsBreadcrumbItemElementEventMap {
        "odsBreadcrumbItemCollapsedClick": void;
        "odsBreadcrumbItemClick": OdsBreadcrumbAttributeItem1 & { event: MouseEvent };
    }
    interface HTMLOsdsBreadcrumbItemElement extends Components.OsdsBreadcrumbItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOsdsBreadcrumbItemElementEventMap>(type: K, listener: (this: HTMLOsdsBreadcrumbItemElement, ev: OsdsBreadcrumbItemCustomEvent<HTMLOsdsBreadcrumbItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOsdsBreadcrumbItemElementEventMap>(type: K, listener: (this: HTMLOsdsBreadcrumbItemElement, ev: OsdsBreadcrumbItemCustomEvent<HTMLOsdsBreadcrumbItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOsdsBreadcrumbItemElement: {
        prototype: HTMLOsdsBreadcrumbItemElement;
        new (): HTMLOsdsBreadcrumbItemElement;
    };
    interface HTMLOsdsButtonElement extends Components.OsdsButton, HTMLStencilElement {
    }
    var HTMLOsdsButtonElement: {
        prototype: HTMLOsdsButtonElement;
        new (): HTMLOsdsButtonElement;
    };
    interface HTMLOsdsCartElement extends Components.OsdsCart, HTMLStencilElement {
    }
    var HTMLOsdsCartElement: {
        prototype: HTMLOsdsCartElement;
        new (): HTMLOsdsCartElement;
    };
    interface HTMLOsdsCartFooterElement extends Components.OsdsCartFooter, HTMLStencilElement {
    }
    var HTMLOsdsCartFooterElement: {
        prototype: HTMLOsdsCartFooterElement;
        new (): HTMLOsdsCartFooterElement;
    };
    interface HTMLOsdsCartFooterItemElement extends Components.OsdsCartFooterItem, HTMLStencilElement {
    }
    var HTMLOsdsCartFooterItemElement: {
        prototype: HTMLOsdsCartFooterItemElement;
        new (): HTMLOsdsCartFooterItemElement;
    };
    interface HTMLOsdsCartHeaderElement extends Components.OsdsCartHeader, HTMLStencilElement {
    }
    var HTMLOsdsCartHeaderElement: {
        prototype: HTMLOsdsCartHeaderElement;
        new (): HTMLOsdsCartHeaderElement;
    };
    interface HTMLOsdsCartItemElement extends Components.OsdsCartItem, HTMLStencilElement {
    }
    var HTMLOsdsCartItemElement: {
        prototype: HTMLOsdsCartItemElement;
        new (): HTMLOsdsCartItemElement;
    };
    interface HTMLOsdsCartItemOptionElement extends Components.OsdsCartItemOption, HTMLStencilElement {
    }
    var HTMLOsdsCartItemOptionElement: {
        prototype: HTMLOsdsCartItemOptionElement;
        new (): HTMLOsdsCartItemOptionElement;
    };
    interface HTMLOsdsCartManagerElement extends Components.OsdsCartManager, HTMLStencilElement {
    }
    var HTMLOsdsCartManagerElement: {
        prototype: HTMLOsdsCartManagerElement;
        new (): HTMLOsdsCartManagerElement;
    };
    interface HTMLOsdsCartSectionElement extends Components.OsdsCartSection, HTMLStencilElement {
    }
    var HTMLOsdsCartSectionElement: {
        prototype: HTMLOsdsCartSectionElement;
        new (): HTMLOsdsCartSectionElement;
    };
    interface HTMLOsdsCartTotalElement extends Components.OsdsCartTotal, HTMLStencilElement {
    }
    var HTMLOsdsCartTotalElement: {
        prototype: HTMLOsdsCartTotalElement;
        new (): HTMLOsdsCartTotalElement;
    };
    interface HTMLOsdsCheckboxElementEventMap {
        "odsBlur": OdsCheckboxFocusChangeEventDetail;
        "odsCheckedChange": OdsCheckboxCheckedChangeEventDetail;
        "odsFocus": OdsCheckboxFocusChangeEventDetail;
        "odsUpdatingChange": OdsCheckboxUpdatingChangeEventDetail;
    }
    interface HTMLOsdsCheckboxElement extends Components.OsdsCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOsdsCheckboxElementEventMap>(type: K, listener: (this: HTMLOsdsCheckboxElement, ev: OsdsCheckboxCustomEvent<HTMLOsdsCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOsdsCheckboxElementEventMap>(type: K, listener: (this: HTMLOsdsCheckboxElement, ev: OsdsCheckboxCustomEvent<HTMLOsdsCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOsdsCheckboxElement: {
        prototype: HTMLOsdsCheckboxElement;
        new (): HTMLOsdsCheckboxElement;
    };
    interface HTMLOsdsCheckboxButtonElement extends Components.OsdsCheckboxButton, HTMLStencilElement {
    }
    var HTMLOsdsCheckboxButtonElement: {
        prototype: HTMLOsdsCheckboxButtonElement;
        new (): HTMLOsdsCheckboxButtonElement;
    };
    interface HTMLOsdsChipElementEventMap {
        "odsChipRemoval": void;
    }
    interface HTMLOsdsChipElement extends Components.OsdsChip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOsdsChipElementEventMap>(type: K, listener: (this: HTMLOsdsChipElement, ev: OsdsChipCustomEvent<HTMLOsdsChipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOsdsChipElementEventMap>(type: K, listener: (this: HTMLOsdsChipElement, ev: OsdsChipCustomEvent<HTMLOsdsChipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOsdsChipElement: {
        prototype: HTMLOsdsChipElement;
        new (): HTMLOsdsChipElement;
    };
    interface HTMLOsdsClipboardElementEventMap {
        "odsClipboardCopied": string;
    }
    interface HTMLOsdsClipboardElement extends Components.OsdsClipboard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOsdsClipboardElementEventMap>(type: K, listener: (this: HTMLOsdsClipboardElement, ev: OsdsClipboardCustomEvent<HTMLOsdsClipboardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOsdsClipboardElementEventMap>(type: K, listener: (this: HTMLOsdsClipboardElement, ev: OsdsClipboardCustomEvent<HTMLOsdsClipboardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOsdsClipboardElement: {
        prototype: HTMLOsdsClipboardElement;
        new (): HTMLOsdsClipboardElement;
    };
    interface HTMLOsdsCodeElementEventMap {
        "odsCodeCopy": void;
    }
    interface HTMLOsdsCodeElement extends Components.OsdsCode, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOsdsCodeElementEventMap>(type: K, listener: (this: HTMLOsdsCodeElement, ev: OsdsCodeCustomEvent<HTMLOsdsCodeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOsdsCodeElementEventMap>(type: K, listener: (this: HTMLOsdsCodeElement, ev: OsdsCodeCustomEvent<HTMLOsdsCodeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOsdsCodeElement: {
        prototype: HTMLOsdsCodeElement;
        new (): HTMLOsdsCodeElement;
    };
    interface HTMLOsdsCollapsibleElementEventMap {
        "odsCollapsibleToggle": boolean;
    }
    interface HTMLOsdsCollapsibleElement extends Components.OsdsCollapsible, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOsdsCollapsibleElementEventMap>(type: K, listener: (this: HTMLOsdsCollapsibleElement, ev: OsdsCollapsibleCustomEvent<HTMLOsdsCollapsibleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOsdsCollapsibleElementEventMap>(type: K, listener: (this: HTMLOsdsCollapsibleElement, ev: OsdsCollapsibleCustomEvent<HTMLOsdsCollapsibleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOsdsCollapsibleElement: {
        prototype: HTMLOsdsCollapsibleElement;
        new (): HTMLOsdsCollapsibleElement;
    };
    interface HTMLOsdsContentAddonElement extends Components.OsdsContentAddon, HTMLStencilElement {
    }
    var HTMLOsdsContentAddonElement: {
        prototype: HTMLOsdsContentAddonElement;
        new (): HTMLOsdsContentAddonElement;
    };
    interface HTMLOsdsDatagridElementEventMap {
        "odsSortChange": { field: string, dir: 'asc' | 'desc' | 'none' };
        "odsRowSelectionChange": { rows: OdsDatagridRow[] };
        "odsBottomScroll": void;
    }
    interface HTMLOsdsDatagridElement extends Components.OsdsDatagrid, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOsdsDatagridElementEventMap>(type: K, listener: (this: HTMLOsdsDatagridElement, ev: OsdsDatagridCustomEvent<HTMLOsdsDatagridElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOsdsDatagridElementEventMap>(type: K, listener: (this: HTMLOsdsDatagridElement, ev: OsdsDatagridCustomEvent<HTMLOsdsDatagridElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOsdsDatagridElement: {
        prototype: HTMLOsdsDatagridElement;
        new (): HTMLOsdsDatagridElement;
    };
    interface HTMLOsdsDatepickerElementEventMap {
        "odsDatepickerBlur": void;
        "odsDatepickerFocus": void;
        "odsDatepickerValueChange": OdsDatepickerValueChangeEventDetail;
    }
    interface HTMLOsdsDatepickerElement extends Components.OsdsDatepicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOsdsDatepickerElementEventMap>(type: K, listener: (this: HTMLOsdsDatepickerElement, ev: OsdsDatepickerCustomEvent<HTMLOsdsDatepickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOsdsDatepickerElementEventMap>(type: K, listener: (this: HTMLOsdsDatepickerElement, ev: OsdsDatepickerCustomEvent<HTMLOsdsDatepickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOsdsDatepickerElement: {
        prototype: HTMLOsdsDatepickerElement;
        new (): HTMLOsdsDatepickerElement;
    };
    interface HTMLOsdsDividerElement extends Components.OsdsDivider, HTMLStencilElement {
    }
    var HTMLOsdsDividerElement: {
        prototype: HTMLOsdsDividerElement;
        new (): HTMLOsdsDividerElement;
    };
    interface HTMLOsdsFlagElement extends Components.OsdsFlag, HTMLStencilElement {
    }
    var HTMLOsdsFlagElement: {
        prototype: HTMLOsdsFlagElement;
        new (): HTMLOsdsFlagElement;
    };
    interface HTMLOsdsFormFieldElement extends Components.OsdsFormField, HTMLStencilElement {
    }
    var HTMLOsdsFormFieldElement: {
        prototype: HTMLOsdsFormFieldElement;
        new (): HTMLOsdsFormFieldElement;
    };
    interface HTMLOsdsIconElement extends Components.OsdsIcon, HTMLStencilElement {
    }
    var HTMLOsdsIconElement: {
        prototype: HTMLOsdsIconElement;
        new (): HTMLOsdsIconElement;
    };
    interface HTMLOsdsInputElementEventMap {
        "odsValueChange": OdsInputValueChangeEventDetail;
        "odsInputBlur": void;
        "odsInputFocus": void;
    }
    interface HTMLOsdsInputElement extends Components.OsdsInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOsdsInputElementEventMap>(type: K, listener: (this: HTMLOsdsInputElement, ev: OsdsInputCustomEvent<HTMLOsdsInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOsdsInputElementEventMap>(type: K, listener: (this: HTMLOsdsInputElement, ev: OsdsInputCustomEvent<HTMLOsdsInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOsdsInputElement: {
        prototype: HTMLOsdsInputElement;
        new (): HTMLOsdsInputElement;
    };
    interface HTMLOsdsLinkElement extends Components.OsdsLink, HTMLStencilElement {
    }
    var HTMLOsdsLinkElement: {
        prototype: HTMLOsdsLinkElement;
        new (): HTMLOsdsLinkElement;
    };
    interface HTMLOsdsMediumElement extends Components.OsdsMedium, HTMLStencilElement {
    }
    var HTMLOsdsMediumElement: {
        prototype: HTMLOsdsMediumElement;
        new (): HTMLOsdsMediumElement;
    };
    interface HTMLOsdsMenuElement extends Components.OsdsMenu, HTMLStencilElement {
    }
    var HTMLOsdsMenuElement: {
        prototype: HTMLOsdsMenuElement;
        new (): HTMLOsdsMenuElement;
    };
    interface HTMLOsdsMenuGroupElement extends Components.OsdsMenuGroup, HTMLStencilElement {
    }
    var HTMLOsdsMenuGroupElement: {
        prototype: HTMLOsdsMenuGroupElement;
        new (): HTMLOsdsMenuGroupElement;
    };
    interface HTMLOsdsMenuItemElement extends Components.OsdsMenuItem, HTMLStencilElement {
    }
    var HTMLOsdsMenuItemElement: {
        prototype: HTMLOsdsMenuItemElement;
        new (): HTMLOsdsMenuItemElement;
    };
    interface HTMLOsdsMessageElementEventMap {
        "odsRemoveClick": void;
    }
    interface HTMLOsdsMessageElement extends Components.OsdsMessage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOsdsMessageElementEventMap>(type: K, listener: (this: HTMLOsdsMessageElement, ev: OsdsMessageCustomEvent<HTMLOsdsMessageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOsdsMessageElementEventMap>(type: K, listener: (this: HTMLOsdsMessageElement, ev: OsdsMessageCustomEvent<HTMLOsdsMessageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOsdsMessageElement: {
        prototype: HTMLOsdsMessageElement;
        new (): HTMLOsdsMessageElement;
    };
    interface HTMLOsdsModalElementEventMap {
        "odsModalOpen": void;
        "odsModalClose": void;
    }
    interface HTMLOsdsModalElement extends Components.OsdsModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOsdsModalElementEventMap>(type: K, listener: (this: HTMLOsdsModalElement, ev: OsdsModalCustomEvent<HTMLOsdsModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOsdsModalElementEventMap>(type: K, listener: (this: HTMLOsdsModalElement, ev: OsdsModalCustomEvent<HTMLOsdsModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOsdsModalElement: {
        prototype: HTMLOsdsModalElement;
        new (): HTMLOsdsModalElement;
    };
    interface HTMLOsdsPaginationElementEventMap {
        "odsPaginationChanged": OdsPaginationChangedEventDetail;
        "odsPaginationItemPerPageChanged": OdsPaginationItemPerPageChangedEventDetail;
    }
    interface HTMLOsdsPaginationElement extends Components.OsdsPagination, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOsdsPaginationElementEventMap>(type: K, listener: (this: HTMLOsdsPaginationElement, ev: OsdsPaginationCustomEvent<HTMLOsdsPaginationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOsdsPaginationElementEventMap>(type: K, listener: (this: HTMLOsdsPaginationElement, ev: OsdsPaginationCustomEvent<HTMLOsdsPaginationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOsdsPaginationElement: {
        prototype: HTMLOsdsPaginationElement;
        new (): HTMLOsdsPaginationElement;
    };
    interface HTMLOsdsPasswordElementEventMap {
        "odsBlur": void;
        "odsFocus": void;
        "odsValueChange": OdsInputValueChangeEventDetail1;
    }
    interface HTMLOsdsPasswordElement extends Components.OsdsPassword, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOsdsPasswordElementEventMap>(type: K, listener: (this: HTMLOsdsPasswordElement, ev: OsdsPasswordCustomEvent<HTMLOsdsPasswordElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOsdsPasswordElementEventMap>(type: K, listener: (this: HTMLOsdsPasswordElement, ev: OsdsPasswordCustomEvent<HTMLOsdsPasswordElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOsdsPasswordElement: {
        prototype: HTMLOsdsPasswordElement;
        new (): HTMLOsdsPasswordElement;
    };
    interface HTMLOsdsPhoneNumberElementEventMap {
        "odsBlur": void;
        "odsFocus": void;
        "odsValueChange": OdsPhoneNumberValueChangeEventDetail;
    }
    interface HTMLOsdsPhoneNumberElement extends Components.OsdsPhoneNumber, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOsdsPhoneNumberElementEventMap>(type: K, listener: (this: HTMLOsdsPhoneNumberElement, ev: OsdsPhoneNumberCustomEvent<HTMLOsdsPhoneNumberElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOsdsPhoneNumberElementEventMap>(type: K, listener: (this: HTMLOsdsPhoneNumberElement, ev: OsdsPhoneNumberCustomEvent<HTMLOsdsPhoneNumberElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOsdsPhoneNumberElement: {
        prototype: HTMLOsdsPhoneNumberElement;
        new (): HTMLOsdsPhoneNumberElement;
    };
    interface HTMLOsdsPopoverElement extends Components.OsdsPopover, HTMLStencilElement {
    }
    var HTMLOsdsPopoverElement: {
        prototype: HTMLOsdsPopoverElement;
        new (): HTMLOsdsPopoverElement;
    };
    interface HTMLOsdsPopoverContentElement extends Components.OsdsPopoverContent, HTMLStencilElement {
    }
    var HTMLOsdsPopoverContentElement: {
        prototype: HTMLOsdsPopoverContentElement;
        new (): HTMLOsdsPopoverContentElement;
    };
    interface HTMLOsdsProgressBarElement extends Components.OsdsProgressBar, HTMLStencilElement {
    }
    var HTMLOsdsProgressBarElement: {
        prototype: HTMLOsdsProgressBarElement;
        new (): HTMLOsdsProgressBarElement;
    };
    /**
     * create type that correspond to our input component.
     * doesn't work with :
     * ```
     * // not working
     * import '@ovhcloud/ods-stencil/components/button';
     * // not working
     * import '@ovhcloud/ods-stencil/components/input/dist/types/components';
     * // OK!
     * import { OsdsInput } from '@ovhcloud/ods-stencil/components/input/dist/types';
     * type HTMLOsdsInputElement = (OsdsInput & HTMLElement);
     * ```
     * with this, we cannot build
     * @ovhcloud /ods-components ("Component Tag Name "osds-input" Must Be Unique" error)
     */
    interface HTMLOsdsQuantityElement extends Components.OsdsQuantity, HTMLStencilElement {
    }
    var HTMLOsdsQuantityElement: {
        prototype: HTMLOsdsQuantityElement;
        new (): HTMLOsdsQuantityElement;
    };
    interface HTMLOsdsRadioElementEventMap {
        "odsValueChange": { checked: boolean, value: string };
        "odsCheckedChange": OdsRadioCheckedChangeEventDetail;
        "odsCheckingChange": OdsRadioCheckingChangeEventDetail;
        "odsFocus": void;
        "odsBlur": void;
    }
    interface HTMLOsdsRadioElement extends Components.OsdsRadio, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOsdsRadioElementEventMap>(type: K, listener: (this: HTMLOsdsRadioElement, ev: OsdsRadioCustomEvent<HTMLOsdsRadioElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOsdsRadioElementEventMap>(type: K, listener: (this: HTMLOsdsRadioElement, ev: OsdsRadioCustomEvent<HTMLOsdsRadioElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOsdsRadioElement: {
        prototype: HTMLOsdsRadioElement;
        new (): HTMLOsdsRadioElement;
    };
    interface HTMLOsdsRadioButtonElement extends Components.OsdsRadioButton, HTMLStencilElement {
    }
    var HTMLOsdsRadioButtonElement: {
        prototype: HTMLOsdsRadioButtonElement;
        new (): HTMLOsdsRadioButtonElement;
    };
    interface HTMLOsdsRadioGroupElementEventMap {
        "odsValueChange": { newValue?: string, previousValue?: string };
        "odsDisabledChange": { value: boolean };
    }
    interface HTMLOsdsRadioGroupElement extends Components.OsdsRadioGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOsdsRadioGroupElementEventMap>(type: K, listener: (this: HTMLOsdsRadioGroupElement, ev: OsdsRadioGroupCustomEvent<HTMLOsdsRadioGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOsdsRadioGroupElementEventMap>(type: K, listener: (this: HTMLOsdsRadioGroupElement, ev: OsdsRadioGroupCustomEvent<HTMLOsdsRadioGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOsdsRadioGroupElement: {
        prototype: HTMLOsdsRadioGroupElement;
        new (): HTMLOsdsRadioGroupElement;
    };
    interface HTMLOsdsRangeElementEventMap {
        "odsBlur": void;
        "odsFocus": void;
        "odsValueChange": OdsRangeValueChangeEventDetail;
    }
    interface HTMLOsdsRangeElement extends Components.OsdsRange, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOsdsRangeElementEventMap>(type: K, listener: (this: HTMLOsdsRangeElement, ev: OsdsRangeCustomEvent<HTMLOsdsRangeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOsdsRangeElementEventMap>(type: K, listener: (this: HTMLOsdsRangeElement, ev: OsdsRangeCustomEvent<HTMLOsdsRangeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOsdsRangeElement: {
        prototype: HTMLOsdsRangeElement;
        new (): HTMLOsdsRangeElement;
    };
    interface HTMLOsdsSearchBarElementEventMap {
        "odsBlur": void;
        "odsFocus": void;
        "odsSearchSubmit": { optionValue: string; inputValue: string };
        "odsValueChange": OdsInputValueChangeEventDetail1;
    }
    interface HTMLOsdsSearchBarElement extends Components.OsdsSearchBar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOsdsSearchBarElementEventMap>(type: K, listener: (this: HTMLOsdsSearchBarElement, ev: OsdsSearchBarCustomEvent<HTMLOsdsSearchBarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOsdsSearchBarElementEventMap>(type: K, listener: (this: HTMLOsdsSearchBarElement, ev: OsdsSearchBarCustomEvent<HTMLOsdsSearchBarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOsdsSearchBarElement: {
        prototype: HTMLOsdsSearchBarElement;
        new (): HTMLOsdsSearchBarElement;
    };
    interface HTMLOsdsSelectElementEventMap {
        "odsValueChange": OdsSelectValueChangeEventDetail;
        "odsFocus": void;
        "odsBlur": void;
    }
    interface HTMLOsdsSelectElement extends Components.OsdsSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOsdsSelectElementEventMap>(type: K, listener: (this: HTMLOsdsSelectElement, ev: OsdsSelectCustomEvent<HTMLOsdsSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOsdsSelectElementEventMap>(type: K, listener: (this: HTMLOsdsSelectElement, ev: OsdsSelectCustomEvent<HTMLOsdsSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOsdsSelectElement: {
        prototype: HTMLOsdsSelectElement;
        new (): HTMLOsdsSelectElement;
    };
    interface HTMLOsdsSelectGroupElement extends Components.OsdsSelectGroup, HTMLStencilElement {
    }
    var HTMLOsdsSelectGroupElement: {
        prototype: HTMLOsdsSelectGroupElement;
        new (): HTMLOsdsSelectGroupElement;
    };
    interface HTMLOsdsSelectOptionElementEventMap {
        "odsSelectOptionClick": OdsSelectOptionClickEventDetail;
    }
    interface HTMLOsdsSelectOptionElement extends Components.OsdsSelectOption, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOsdsSelectOptionElementEventMap>(type: K, listener: (this: HTMLOsdsSelectOptionElement, ev: OsdsSelectOptionCustomEvent<HTMLOsdsSelectOptionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOsdsSelectOptionElementEventMap>(type: K, listener: (this: HTMLOsdsSelectOptionElement, ev: OsdsSelectOptionCustomEvent<HTMLOsdsSelectOptionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOsdsSelectOptionElement: {
        prototype: HTMLOsdsSelectOptionElement;
        new (): HTMLOsdsSelectOptionElement;
    };
    interface HTMLOsdsSkeletonElement extends Components.OsdsSkeleton, HTMLStencilElement {
    }
    var HTMLOsdsSkeletonElement: {
        prototype: HTMLOsdsSkeletonElement;
        new (): HTMLOsdsSkeletonElement;
    };
    interface HTMLOsdsSpinnerElement extends Components.OsdsSpinner, HTMLStencilElement {
    }
    var HTMLOsdsSpinnerElement: {
        prototype: HTMLOsdsSpinnerElement;
        new (): HTMLOsdsSpinnerElement;
    };
    interface HTMLOsdsSwitchElementEventMap {
        "odsSwitchChanged": OdsSwitchChangedEventDetail;
    }
    interface HTMLOsdsSwitchElement extends Components.OsdsSwitch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOsdsSwitchElementEventMap>(type: K, listener: (this: HTMLOsdsSwitchElement, ev: OsdsSwitchCustomEvent<HTMLOsdsSwitchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOsdsSwitchElementEventMap>(type: K, listener: (this: HTMLOsdsSwitchElement, ev: OsdsSwitchCustomEvent<HTMLOsdsSwitchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOsdsSwitchElement: {
        prototype: HTMLOsdsSwitchElement;
        new (): HTMLOsdsSwitchElement;
    };
    interface HTMLOsdsSwitchItemElement extends Components.OsdsSwitchItem, HTMLStencilElement {
    }
    var HTMLOsdsSwitchItemElement: {
        prototype: HTMLOsdsSwitchItemElement;
        new (): HTMLOsdsSwitchItemElement;
    };
    /**
     * assemble different item in a bar
     */
    interface HTMLOsdsTabBarElement extends Components.OsdsTabBar, HTMLStencilElement {
    }
    var HTMLOsdsTabBarElement: {
        prototype: HTMLOsdsTabBarElement;
        new (): HTMLOsdsTabBarElement;
    };
    interface HTMLOsdsTabBarItemElementEventMap {
        "odsTabItemSelectEvent": OdsTabItemSelectEventDetail;
    }
    /**
     * An Item that is part of the tab bar
     */
    interface HTMLOsdsTabBarItemElement extends Components.OsdsTabBarItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOsdsTabBarItemElementEventMap>(type: K, listener: (this: HTMLOsdsTabBarItemElement, ev: OsdsTabBarItemCustomEvent<HTMLOsdsTabBarItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOsdsTabBarItemElementEventMap>(type: K, listener: (this: HTMLOsdsTabBarItemElement, ev: OsdsTabBarItemCustomEvent<HTMLOsdsTabBarItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOsdsTabBarItemElement: {
        prototype: HTMLOsdsTabBarItemElement;
        new (): HTMLOsdsTabBarItemElement;
    };
    /**
     * Panel with content that has to be displayed when active
     */
    interface HTMLOsdsTabPanelElement extends Components.OsdsTabPanel, HTMLStencilElement {
    }
    var HTMLOsdsTabPanelElement: {
        prototype: HTMLOsdsTabPanelElement;
        new (): HTMLOsdsTabPanelElement;
    };
    interface HTMLOsdsTabsElementEventMap {
        "odsTabsChanged": OdsTabsChangeEventDetail;
    }
    /**
     * Main tabs component
     */
    interface HTMLOsdsTabsElement extends Components.OsdsTabs, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOsdsTabsElementEventMap>(type: K, listener: (this: HTMLOsdsTabsElement, ev: OsdsTabsCustomEvent<HTMLOsdsTabsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOsdsTabsElementEventMap>(type: K, listener: (this: HTMLOsdsTabsElement, ev: OsdsTabsCustomEvent<HTMLOsdsTabsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOsdsTabsElement: {
        prototype: HTMLOsdsTabsElement;
        new (): HTMLOsdsTabsElement;
    };
    interface HTMLOsdsTextElement extends Components.OsdsText, HTMLStencilElement {
    }
    var HTMLOsdsTextElement: {
        prototype: HTMLOsdsTextElement;
        new (): HTMLOsdsTextElement;
    };
    interface HTMLOsdsTextareaElementEventMap {
        "odsBlur": void;
        "odsFocus": void;
        "odsValueChange": OdsTextAreaValueChangeEvent;
    }
    interface HTMLOsdsTextareaElement extends Components.OsdsTextarea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOsdsTextareaElementEventMap>(type: K, listener: (this: HTMLOsdsTextareaElement, ev: OsdsTextareaCustomEvent<HTMLOsdsTextareaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOsdsTextareaElementEventMap>(type: K, listener: (this: HTMLOsdsTextareaElement, ev: OsdsTextareaCustomEvent<HTMLOsdsTextareaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOsdsTextareaElement: {
        prototype: HTMLOsdsTextareaElement;
        new (): HTMLOsdsTextareaElement;
    };
    interface HTMLOsdsTileElement extends Components.OsdsTile, HTMLStencilElement {
    }
    var HTMLOsdsTileElement: {
        prototype: HTMLOsdsTileElement;
        new (): HTMLOsdsTileElement;
    };
    interface HTMLOsdsToggleElement extends Components.OsdsToggle, HTMLStencilElement {
    }
    var HTMLOsdsToggleElement: {
        prototype: HTMLOsdsToggleElement;
        new (): HTMLOsdsToggleElement;
    };
    interface HTMLOsdsTooltipElement extends Components.OsdsTooltip, HTMLStencilElement {
    }
    var HTMLOsdsTooltipElement: {
        prototype: HTMLOsdsTooltipElement;
        new (): HTMLOsdsTooltipElement;
    };
    interface HTMLOsdsTooltipContentElement extends Components.OsdsTooltipContent, HTMLStencilElement {
    }
    var HTMLOsdsTooltipContentElement: {
        prototype: HTMLOsdsTooltipContentElement;
        new (): HTMLOsdsTooltipContentElement;
    };
    interface HTMLElementTagNameMap {
        "osds-accordion": HTMLOsdsAccordionElement;
        "osds-accordion-group": HTMLOsdsAccordionGroupElement;
        "osds-breadcrumb": HTMLOsdsBreadcrumbElement;
        "osds-breadcrumb-item": HTMLOsdsBreadcrumbItemElement;
        "osds-button": HTMLOsdsButtonElement;
        "osds-cart": HTMLOsdsCartElement;
        "osds-cart-footer": HTMLOsdsCartFooterElement;
        "osds-cart-footer-item": HTMLOsdsCartFooterItemElement;
        "osds-cart-header": HTMLOsdsCartHeaderElement;
        "osds-cart-item": HTMLOsdsCartItemElement;
        "osds-cart-item-option": HTMLOsdsCartItemOptionElement;
        "osds-cart-manager": HTMLOsdsCartManagerElement;
        "osds-cart-section": HTMLOsdsCartSectionElement;
        "osds-cart-total": HTMLOsdsCartTotalElement;
        "osds-checkbox": HTMLOsdsCheckboxElement;
        "osds-checkbox-button": HTMLOsdsCheckboxButtonElement;
        "osds-chip": HTMLOsdsChipElement;
        "osds-clipboard": HTMLOsdsClipboardElement;
        "osds-code": HTMLOsdsCodeElement;
        "osds-collapsible": HTMLOsdsCollapsibleElement;
        "osds-content-addon": HTMLOsdsContentAddonElement;
        "osds-datagrid": HTMLOsdsDatagridElement;
        "osds-datepicker": HTMLOsdsDatepickerElement;
        "osds-divider": HTMLOsdsDividerElement;
        "osds-flag": HTMLOsdsFlagElement;
        "osds-form-field": HTMLOsdsFormFieldElement;
        "osds-icon": HTMLOsdsIconElement;
        "osds-input": HTMLOsdsInputElement;
        "osds-link": HTMLOsdsLinkElement;
        "osds-medium": HTMLOsdsMediumElement;
        "osds-menu": HTMLOsdsMenuElement;
        "osds-menu-group": HTMLOsdsMenuGroupElement;
        "osds-menu-item": HTMLOsdsMenuItemElement;
        "osds-message": HTMLOsdsMessageElement;
        "osds-modal": HTMLOsdsModalElement;
        "osds-pagination": HTMLOsdsPaginationElement;
        "osds-password": HTMLOsdsPasswordElement;
        "osds-phone-number": HTMLOsdsPhoneNumberElement;
        "osds-popover": HTMLOsdsPopoverElement;
        "osds-popover-content": HTMLOsdsPopoverContentElement;
        "osds-progress-bar": HTMLOsdsProgressBarElement;
        "osds-quantity": HTMLOsdsQuantityElement;
        "osds-radio": HTMLOsdsRadioElement;
        "osds-radio-button": HTMLOsdsRadioButtonElement;
        "osds-radio-group": HTMLOsdsRadioGroupElement;
        "osds-range": HTMLOsdsRangeElement;
        "osds-search-bar": HTMLOsdsSearchBarElement;
        "osds-select": HTMLOsdsSelectElement;
        "osds-select-group": HTMLOsdsSelectGroupElement;
        "osds-select-option": HTMLOsdsSelectOptionElement;
        "osds-skeleton": HTMLOsdsSkeletonElement;
        "osds-spinner": HTMLOsdsSpinnerElement;
        "osds-switch": HTMLOsdsSwitchElement;
        "osds-switch-item": HTMLOsdsSwitchItemElement;
        "osds-tab-bar": HTMLOsdsTabBarElement;
        "osds-tab-bar-item": HTMLOsdsTabBarItemElement;
        "osds-tab-panel": HTMLOsdsTabPanelElement;
        "osds-tabs": HTMLOsdsTabsElement;
        "osds-text": HTMLOsdsTextElement;
        "osds-textarea": HTMLOsdsTextareaElement;
        "osds-tile": HTMLOsdsTileElement;
        "osds-toggle": HTMLOsdsToggleElement;
        "osds-tooltip": HTMLOsdsTooltipElement;
        "osds-tooltip-content": HTMLOsdsTooltipContentElement;
    }
}
declare namespace LocalJSX {
    interface OsdsAccordion {
        /**
          * main color: see component principles
          * @see OdsAccordionAttributes.color
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * contrasted or not: see component principles
          * @see OdsAccordionAttributes.contrasted
         */
        "contrasted"?: boolean;
        /**
          * disabled: see component principles
          * @see OdsAccordionAttributes.disabled
         */
        "disabled"?: boolean;
        /**
          * Event triggered on accordion toggle
          * @see OdsAccordionEvents.odsAccordionToggle
         */
        "onOdsAccordionToggle"?: (event: OsdsAccordionCustomEvent<boolean>) => void;
        /**
          * opened or not
          * @see OdsAccordionAttributes.opened
         */
        "opened"?: boolean;
        /**
          * size: see component principles
          * @see OdsAccordionAttributes.size
         */
        "size"?: ODS_ACCORDION_SIZE;
    }
    interface OsdsAccordionGroup {
    }
    interface OsdsBreadcrumb {
        /**
          * contrasted or not: see component principles
          * @see OdsBreadcrumbAttributes.contrasted
         */
        "contrasted"?: boolean;
        /**
          * List of breadcrumb items to display
          * @see OdsBreadcrumbAttributes.items
         */
        "items"?: OdsBreadcrumbAttributeItem[] | string;
    }
    interface OsdsBreadcrumbItem {
        /**
          * contrasted or not: see component principles
          * @see OdsBreadcrumbItemAttribute.contrasted
         */
        "contrasted"?: boolean | undefined;
        /**
          * Item should be disabled or not
          * @see OdsBreadcrumbItemAttribute.disabled
         */
        "disabled"?: boolean | undefined;
        /**
          * Item link to redirect to
          * @see OdsBreadcrumbItemAttribute.href
         */
        "href"?: string | undefined;
        /**
          * Icon to display
          * @see OdsBreadcrumbItemAttribute.icon
         */
        "icon"?: ODS_ICON_NAME;
        "isCollapsed"?: boolean;
        "isExpandableItem"?: boolean;
        "isLast"?: boolean;
        /**
          * Text to display
          * @see OdsBreadcrumbItemAttribute.label
         */
        "label"?: string;
        /**
          * Event triggered item click
          * @see OdsBreadcrumbItemEvent.odsBreadcrumbItemClick
         */
        "onOdsBreadcrumbItemClick"?: (event: OsdsBreadcrumbItemCustomEvent<OdsBreadcrumbAttributeItem1 & { event: MouseEvent }>) => void;
        /**
          * Event triggered on collapsed item click
          * @see OdsBreadcrumbItemEvent.odsBreadcrumbItemCollapsedClick
         */
        "onOdsBreadcrumbItemCollapsedClick"?: (event: OsdsBreadcrumbItemCustomEvent<void>) => void;
        /**
          * Link referrer policy
          * @see OdsBreadcrumbItemAttribute.referrerpolicy
         */
        "referrerpolicy"?: ODS_LINK_REFERRER_POLICY;
        /**
          * Link relationship
          * @see OdsBreadcrumbItemAttribute.rel
         */
        "rel"?: OdsHTMLAnchorElementRel;
        /**
          * Link target type Specifies where to open the link
          * @see OdsBreadcrumbItemAttribute.target
         */
        "target"?: OdsHTMLAnchorElementTarget;
    }
    interface OsdsButton {
        /**
          * use a circle shape
          * @see OdsButtonAttributes.circle
         */
        "circle"?: boolean | undefined;
        /**
          * main color: see component principles
          * @see OdsButtonAttributes.color
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * contrasted or not: see component principles
          * @see OdsButtonAttributes.contrasted
         */
        "contrasted"?: boolean | undefined;
        /**
          * disabled or not: see component principles
          * @see OdsButtonAttributes.disabled
         */
        "disabled"?: boolean | undefined;
        /**
          * Button with href as download source
          * @see OdsButtonAttributes.rel
         */
        "download"?: HTMLAnchorElement['download'];
        /**
          * use a button as a link with `<a>` element
          * @see OdsButtonAttributes.href
         */
        "href"?: string;
        /**
          * inline or not: see component principles
          * @see OdsButtonAttributes.inline
         */
        "inline"?: boolean | undefined;
        /**
          * Button with href relationship
          * @see OdsButtonAttributes.rel
         */
        "rel"?: OdsHTMLAnchorElementRel;
        /**
          * size: see component principles
          * @see OdsButtonAttributes.size
         */
        "size"?: ODS_BUTTON_SIZE;
        /**
          * link target if we are in a link-mode (using `href` attribute)
          * @see OdsButtonAttributes.target
         */
        "target"?: OdsHTMLAnchorElementTarget;
        /**
          * type of the vanilla button
          * @see OdsButtonAttributes.textAlign
         */
        "textAlign"?: ODS_BUTTON_TEXT_ALIGN;
        /**
          * @see OdsButtonAttributes.type
         */
        "type"?: ODS_BUTTON_TYPE;
        /**
          * used design aspect
          * @see OdsButtonAttributes.variant
         */
        "variant"?: ODS_BUTTON_VARIANT;
    }
    interface OsdsCart {
        /**
          * is the cart is collapsed (if collapsible)
          * @see OdsCartAttributes.collapsed
         */
        "collapsed"?: boolean;
        /**
          * is the cart can be collapsed in a smaller view
          * @see OdsCartAttributes.collapsible
         */
        "collapsible"?: boolean;
        /**
          * full width or not: see component principles
          * @see OdsCartAttributes.inline
         */
        "inline"?: boolean;
        /**
          * rounds corners of cart's outer border edge
          * @see OdsCartAttributes.rounded
         */
        "rounded"?: ODS_CART_ROUNDED;
        /**
          * size: see component principles
          * @see OdsCartAttributes.size
         */
        "size"?: ODS_CART_SIZE;
    }
    interface OsdsCartFooter {
    }
    interface OsdsCartFooterItem {
    }
    interface OsdsCartHeader {
        /**
          * @see OdsCartHeaderAttributes.headerTitle
         */
        "headerTitle"?: string;
    }
    interface OsdsCartItem {
    }
    interface OsdsCartItemOption {
    }
    interface OsdsCartManager {
        /**
          * describe what the footer is made of
          * @see OdsCartManagerAttributes.footer
         */
        "footer"?: OdsCartManagerFooter;
        /**
          * internationalisation system connector
          * @see OdsCartManagerAttributes.i18n
         */
        "i18n"?: OdsI18nHook;
        /**
          * full width or not: see component principles
          * @see OdsCartManagerAttributes.inline
         */
        "inline"?: boolean;
        /**
          * ISO period code that describe the duration of a periodical payment
          * @see OdsCartManagerAttributes.period
         */
        "period"?: ODS_PERIOD_ISO_CODE;
        /**
          * Sections made of one item and multiple options
          * @see OdsCartManagerAttributes.sections
         */
        "sections"?: OdsCartManagerSection[];
        /**
          * size: see component principles
          * @see OdsCartManagerAttributes.size
         */
        "size"?: ODS_CART_SIZE;
        /**
          * is the cart display the Value Added Tax
          * @see OdsCartManagerAttributes.vatMode
         */
        "vatMode"?: boolean;
    }
    interface OsdsCartSection {
    }
    interface OsdsCartTotal {
    }
    interface OsdsCheckbox {
        /**
          * afterSave input allows to set a function that returns a promise. It is called after each time an update was performed and allowing to manage pessimistic update strategy
          * @see OdsCheckboxAttribute.afterSave
         */
        "afterSave"?: OdsCheckboxAttributeCbk;
        /**
          * The corresponding aria-label describing its content
          * @see OdsCheckboxAttribute.ariaLabel
         */
        "ariaLabel"?: string | null;
        /**
          * The id to an external description
          * @see OdsCheckboxAttribute.ariaLabelledby
         */
        "ariaLabelledby"?: string | undefined;
        /**
          * beforeSave input allows to set a function that returns a promise. It is called before each time an update will be performed and allowing to manage pessimistic update strategy
          * @see OdsCheckboxAttribute.beforeSave
         */
        "beforeSave"?: OdsCheckboxAttributeCbk;
        /**
          * The checked status of the checkbox
          * @see OdsCheckboxAttribute.checked
         */
        "checked"?: boolean;
        /**
          * indicate if the checkbox is entirely disabled. it means no interactions (hover, click, focus, etc)
          * @see OdsCheckboxAttribute.disabled
         */
        "disabled"?: boolean;
        /**
          * is the checkbox is currently focused
          * @see OdsCheckboxAttribute.hasFocus
         */
        "hasFocus"?: boolean;
        /**
          * The corresponding label
          * @see OdsCheckboxAttribute.label
         */
        "label"?: string;
        /**
          * name used for the input element. useful for browser and posting forms
          * @see OdsCheckboxAttribute.name
         */
        "name"?: string;
        /**
          * Event triggered on checkbox blur
          * @see OdsCheckboxEvent.odsBlur
         */
        "onOdsBlur"?: (event: OsdsCheckboxCustomEvent<OdsCheckboxFocusChangeEventDetail>) => void;
        /**
          * the checked state changed
          * @see OdsCheckboxEvent.odsCheckedChange
         */
        "onOdsCheckedChange"?: (event: OsdsCheckboxCustomEvent<OdsCheckboxCheckedChangeEventDetail>) => void;
        /**
          * Event triggered on checkbox focus
          * @see OdsCheckboxEvent.odsFocus
         */
        "onOdsFocus"?: (event: OsdsCheckboxCustomEvent<OdsCheckboxFocusChangeEventDetail>) => void;
        /**
          * the checked state is being changed
          * @see OdsCheckboxEvent.odsUpdatingChange
         */
        "onOdsUpdatingChange"?: (event: OsdsCheckboxCustomEvent<OdsCheckboxUpdatingChangeEventDetail>) => void;
        /**
          * save input allows to set a function that returns a promise. It is called before each time an update is performed and allowing to manage pessimistic update strategy. the checked state will be updated just after the call.
          * @see OdsCheckboxAttribute.save
         */
        "save"?: OdsCheckboxAttributeCbk;
        /**
          * update status indicating if the checked state is being modified. `updating` will be `true` until `beforeSave` or `save` are processed. it is used in `pessimistic` update
          * @see OdsCheckboxAttribute.updating
         */
        "updating"?: boolean;
        /**
          * Its corresponding value
          * @see OdsCheckboxAttribute.value
         */
        "value"?: string;
    }
    interface OsdsCheckboxButton {
        /**
          * The checked status of the checkbox button
          * @see OdsCheckboxButtonAttribute.checked
         */
        "checked"?: boolean | undefined;
        /**
          * @see OdsCheckboxButtonAttribute.checking
         */
        "checking"?: boolean | undefined;
        /**
          * The color theme
          * @see OdsCheckboxButtonAttribute.color
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * Prevent the user from clicking on the radio button
          * @see OdsCheckboxButtonAttribute.disabled
         */
        "disabled"?: boolean | undefined;
        /**
          * Display a focus style (only if interactive)
          * @see OdsCheckboxButtonAttribute.hasFocus
         */
        "hasFocus"?: boolean | undefined;
        /**
          * The indeterminate status of the checkbox button (override checked status)
          * @see OdsCheckboxButtonAttribute.indeterminate
         */
        "indeterminate"?: boolean | undefined;
        /**
          * Display an interactive style when clicking or hovering the radio button
          * @see OdsCheckboxButtonAttribute.interactive
         */
        "interactive"?: boolean | undefined;
        /**
          * Size of the radio button
          * @see OdsCheckboxButtonAttribute.label
         */
        "size"?: ODS_CHECKBOX_BUTTON_SIZE;
    }
    interface OsdsChip {
        /**
          * Chip color theme
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * Chip is in contrasterd mode or not
         */
        "contrasted"?: boolean;
        /**
          * Chip is disabled or not
         */
        "disabled"?: boolean;
        /**
          * Chip as inline
         */
        "inline"?: boolean;
        "onOdsChipRemoval"?: (event: OsdsChipCustomEvent<void>) => void;
        /**
          * If the chip can be removed or not
         */
        "removable"?: boolean;
        /**
          * If the chip can be selected or not
         */
        "selectable"?: boolean;
        /**
          * Chip size
         */
        "size"?: ODS_CHIP_SIZE;
        /**
          * Chip variant
         */
        "variant"?: ODS_CHIP_VARIANT;
    }
    interface OsdsClipboard {
        /**
          * Disabled the input, the focus, and the tooltip
         */
        "disabled"?: boolean;
        /**
          * Indicates if the input is full width or not: see component principles
         */
        "inline"?: boolean;
        "onOdsClipboardCopied"?: (event: OsdsClipboardCustomEvent<string>) => void;
        /**
          * Input text value
         */
        "value"?: string;
    }
    interface OsdsCode {
        /**
          * main color: see component principles
          * @see OdsCodeAttributes.color
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * contrasted or not: see component principles
          * @see OdsCodeAttributes.contrasted
         */
        "contrasted"?: boolean | undefined;
        /**
          * Event triggered on code content copy
          * @see OdsCodeEvents.odsCodeCopy
         */
        "onOdsCodeCopy"?: (event: OsdsCodeCustomEvent<void>) => void;
        /**
          * size: see component principles
          * @see OdsCodeAttributes.size
         */
        "size"?: ODS_CODE_SIZE;
    }
    interface OsdsCollapsible {
        /**
          * Event triggered on collapsible toggle
          * @see OdsCollapsibleEvents.odsCollapsibleToggle
         */
        "onOdsCollapsibleToggle"?: (event: OsdsCollapsibleCustomEvent<boolean>) => void;
        /**
          * opened or not
         */
        "opened"?: boolean;
    }
    interface OsdsContentAddon {
    }
    interface OsdsDatagrid {
        /**
          * The list of the column
         */
        "columns"?: OdsDatagridColumn[] | string;
        /**
          * Can you hide columns
         */
        "hasHideableColumns"?: boolean;
        /**
          * Height of the datagrid, in pixel
         */
        "height"?: number;
        /**
          * List of the hide columns The key need to be according to the column field
         */
        "hideableColumns"?: string[];
        /**
          * The rows can be selected
         */
        "isSelectable"?: boolean;
        /**
          * Text when the datagrid has no rows
         */
        "noResultLabel"?: string;
        "onOdsBottomScroll"?: (event: OsdsDatagridCustomEvent<void>) => void;
        "onOdsRowSelectionChange"?: (event: OsdsDatagridCustomEvent<{ rows: OdsDatagridRow[] }>) => void;
        "onOdsSortChange"?: (event: OsdsDatagridCustomEvent<{ field: string, dir: 'asc' | 'desc' | 'none' }>) => void;
        /**
          * Height for each row, in pixel
         */
        "rowHeight"?: number;
        /**
          * The list of the rows The key needs to be according to the column field
         */
        "rows"?: OdsDatagridRow[] | string;
    }
    interface OsdsDatepicker {
        /**
          * Defines if the Datepicker should be clearable or not (displays a clear button)
         */
        "clearable"?: boolean;
        /**
          * Defines the Datepicker's color (see component principles)
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * Defines the Datepicker's disabled dates
         */
        "datesDisabled"?: Date[];
        /**
          * Defines the Datepicker's disabled days of the week (monday, tuesday...)
         */
        "daysOfWeekDisabled"?: ODS_DATEPICKER_DAY[];
        /**
          * Default value of the input
         */
        "defaultValue"?: Date | null;
        /**
          * Defines if the Datepicker should be disabled or not (lower opacity and not interactable)
         */
        "disabled"?: boolean;
        /**
          * Defines if the Datepicker should display an error message
         */
        "error"?: boolean;
        /**
          * Defines which format the Datepicker should be applying (supported formats: https://mymth.github.io/vanillajs-datepicker/#/date-string+format?id=date-format)
         */
        "format"?: string;
        /**
          * Defines if the Datepicker should be displayed inline or not
         */
        "inline"?: boolean;
        /**
          * Defines the locale to use
         */
        "locale"?: ODS_DATEPICKER_LOCALE;
        /**
          * Defines the Datepicker's maximum selectable date
         */
        "maxDate"?: Date | null;
        /**
          * Defines the Datepicker's minimum selectable date
         */
        "minDate"?: Date | null;
        /**
          * Name of the datepicker field
         */
        "name"?: string;
        /**
          * Triggered on blur
         */
        "onOdsDatepickerBlur"?: (event: OsdsDatepickerCustomEvent<void>) => void;
        /**
          * Triggered on focus
         */
        "onOdsDatepickerFocus"?: (event: OsdsDatepickerCustomEvent<void>) => void;
        /**
          * Triggered on value change
         */
        "onOdsDatepickerValueChange"?: (event: OsdsDatepickerCustomEvent<OdsDatepickerValueChangeEventDetail>) => void;
        /**
          * Defines if the Datepicker should display a placeholder message
         */
        "placeholder"?: string;
        /**
          * Defines if the Datepicker should display others month days
         */
        "showSiblingsMonthDays"?: boolean;
        /**
          * Defines the Datepicker's value (Date object)
         */
        "value"?: Date | null;
    }
    interface OsdsDivider {
        /**
          * Divider color theme
          * @see OdsDividerAttributes.color
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * Divider design as contrasted version
          * @see OdsDividerAttributes.contrasted
         */
        "contrasted"?: boolean | undefined;
        /**
          * Divider has a separator or not
          * @see OdsDividerAttributes.separator
         */
        "separator"?: boolean | undefined;
        /**
          * Divider size
          * @see OdsDividerAttributes.size
         */
        "size"?: ODS_DIVIDER_SIZE;
    }
    interface OsdsFlag {
        /**
          * override the `ODS` directory path of the assets. if not set, the configured path in `ODS` will be used.
         */
        "assetPath"?: string | undefined;
        /**
          * Flag ISO country code
         */
        "iso"?: ODS_FLAG_ISO_CODE_UNION;
        /**
          * allow to lazy load the content only when it's visible
         */
        "lazy"?: boolean;
        /**
          * override with custom src to the svg file.
         */
        "src"?: string | undefined;
    }
    interface OsdsFormField {
        /**
          * Indicates if the Form Field shows error or not
          * @see OdsFormFieldAttributes.error
         */
        "error"?: string;
        /**
          * Indicates if the Form Field is full width or not: see component principles
          * @see OdsFormFieldAttributes.inline
         */
        "inline"?: boolean;
    }
    interface OsdsIcon {
        /**
          * Icon ARIA name
         */
        "ariaName"?: string;
        /**
          * Icon color theme
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * Icon is contrasted or not
         */
        "contrasted"?: boolean;
        /**
          * Icon is hoverabled or not
         */
        "hoverable"?: boolean;
        /**
          * Icon name
         */
        "name"?: ODS_ICON_NAME1;
        /**
          * Icon size
         */
        "size"?: ODS_ICON_SIZE;
    }
    interface OsdsInput {
        "ariaLabel"?: HTMLElement['ariaLabel'];
        /**
          * ID of the element that labels the input
         */
        "ariaLabelledby"?: string;
        /**
          * Ability to clear the input value
         */
        "clearable"?: boolean;
        /**
          * Main color of the input: see component principles
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * Indicates if the input is contrasted or not: see component principles
         */
        "contrasted"?: boolean;
        /**
          * Default value of the input
         */
        "defaultValue"?: OdsInputValue;
        /**
          * Indicates if the input is disabled or not: see component principles
         */
        "disabled"?: boolean;
        /**
          * Indicates if the input shows error or not
         */
        "error"?: boolean;
        /**
          * Controls the error state of the input
         */
        "errorStateControl"?: OdsErrorStateControl;
        /**
          * List of forbidden values for the input
         */
        "forbiddenValues"?: OdsFormForbiddenValues<number>;
        /**
          * Control object of the form the input belongs to
         */
        "formControl"?: OdsFormControl<OdsInputValidityState>;
        /**
          * Icon to be used in the input field
         */
        "icon"?: ODS_ICON_NAME;
        /**
          * Indicates if the input is inline or not: see component principles
         */
        "inline"?: boolean;
        /**
          * Label of the input field
         */
        "label"?: string;
        /**
          * Indicates if the input is in loading state or not
         */
        "loading"?: boolean;
        /**
          * Indicates if the input is masked or not
         */
        "masked"?: boolean;
        /**
          * Maximum value for the input (type number)
         */
        "max"?: number;
        /**
          * Minimum value for the input (type number)
         */
        "min"?: number;
        /**
          * Name of the input field
         */
        "name"?: string;
        "onOdsInputBlur"?: (event: OsdsInputCustomEvent<void>) => void;
        "onOdsInputFocus"?: (event: OsdsInputCustomEvent<void>) => void;
        /**
          * the input value changed
         */
        "onOdsValueChange"?: (event: OsdsInputCustomEvent<OdsInputValueChangeEventDetail>) => void;
        /**
          * Placeholder text for the input
         */
        "placeholder"?: string;
        /**
          * Text before the input value
         */
        "prefixValue"?: string | undefined;
        /**
          * Indicates if the input is read-only or not
         */
        "readOnly"?: boolean;
        /**
          * Indicates if the input is required or not
         */
        "required"?: boolean;
        /**
          * Size of the input: see component principles
         */
        "size"?: ODS_INPUT_SIZE;
        /**
          * Step value for the input
         */
        "step"?: number;
        /**
          * Type of the input field
         */
        "type"?: ODS_INPUT_TYPE;
        /**
          * Current value of the input
         */
        "value"?: OdsInputValue;
    }
    interface OsdsLink {
        /**
          * Link color theme
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * Link design as contrasted version
         */
        "contrasted"?: boolean;
        /**
          * Link should be disabled or not
         */
        "disabled"?: boolean;
        /**
          * Link as download source
         */
        "download"?: HTMLAnchorElement['download'];
        /**
          * Link URL
         */
        "href"?: string;
        /**
          * Link referrer policy
         */
        "referrerpolicy"?: ODS_LINK_REFERRER_POLICY1;
        /**
          * Link relationship
         */
        "rel"?: OdsHTMLAnchorElementRel;
        /**
          * Link target type If href is set the default value `_self` is set
         */
        "target"?: OdsHTMLAnchorElementTarget;
        /**
          * Link type (for download source)
         */
        "type"?: string;
    }
    interface OsdsMedium {
        /**
          * Medium alternative description
         */
        "alt"?: string;
        /**
          * Medium height in px
         */
        "height"?: number;
        /**
          * Medium url or path
         */
        "src"?: string;
        /**
          * Medium width in px
         */
        "width"?: number;
    }
    interface OsdsMenu {
        /**
          * Menu is disabled or not
         */
        "disabled"?: boolean;
    }
    interface OsdsMenuGroup {
    }
    interface OsdsMenuItem {
    }
    interface OsdsMessage {
        /**
          * Message color theme
          * @see OdsMessageAttributes.color
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * Message is in contrasted mode or not
          * @see OdsMessageAttributes.contrasted
         */
        "contrasted"?: boolean | undefined;
        /**
          * The icon prefix
          * @see OdsMessageAttributes.icon
         */
        "icon"?: ODS_ICON_NAME;
        /**
          * Message as inline
          * @see OdsMessageAttributes.inline
         */
        "inline"?: boolean | undefined;
        /**
          * Event triggered on removable icon click
          * @see OdsMessageEvents.odsRemoveClick
         */
        "onOdsRemoveClick"?: (event: OsdsMessageCustomEvent<void>) => void;
        /**
          * If the message can be removed or not
          * @see OdsMessageAttributes.removable
         */
        "removable"?: boolean | undefined;
        /**
          * The message type
          * @see OdsMessageAttributes.type
         */
        "type"?: ODS_MESSAGE_TYPE;
    }
    interface OsdsModal {
        /**
          * Color of the modal's header background
          * @see OdsModalAttributes.color
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * Defines if the modal is dismissible (displays a close button)
          * @see OdsModalAttributes.dismissible
         */
        "dismissible"?: boolean;
        /**
          * Text displayed as the modal's headline
          * @see OdsModalAttributes.headline
         */
        "headline"?: string;
        /**
          * Defines if the modal is masked
          * @see OdsModalAttributes.masked
         */
        "masked"?: boolean;
        /**
          * @see OdsModalEvents.odsModalClose
         */
        "onOdsModalClose"?: (event: OsdsModalCustomEvent<void>) => void;
        /**
          * @see OdsModalEvents.odsModalOpen
         */
        "onOdsModalOpen"?: (event: OsdsModalCustomEvent<void>) => void;
    }
    interface OsdsPagination {
        /**
          * Its corresponding current page.
         */
        "defaultCurrentPage"?: number;
        /**
          * Default items per page.
         */
        "defaultItemsPerPage"?: ODS_PAGINATION_PER_PAGE;
        /**
          * indicates if the pagination is entirely disabled. it means no interactions (hover, click, focus, etc)
         */
        "disabled"?: boolean;
        /**
          * The label of the tooltip on the arrow next
         */
        "labelTooltipNext"?: string;
        /**
          * The label of the tooltip on the arrow previous
         */
        "labelTooltipPrevious"?: string;
        /**
          * Emitted when the value has changed
         */
        "onOdsPaginationChanged"?: (event: OsdsPaginationCustomEvent<OdsPaginationChangedEventDetail>) => void;
        /**
          * Emitted when the number of items per page value has changed
         */
        "onOdsPaginationItemPerPageChanged"?: (event: OsdsPaginationCustomEvent<OdsPaginationItemPerPageChangedEventDetail>) => void;
        /**
          * The total number of items.
         */
        "totalItems"?: number;
        /**
          * The total amount of pages.
         */
        "totalPages"?: number;
    }
    interface OsdsPassword {
        /**
          * ariaLabel of the password
         */
        "ariaLabel"?: HTMLElement['ariaLabel'];
        /**
          * ID of the element that labels the password
         */
        "ariaLabelledby"?: string;
        /**
          * Ability to clear the password value
         */
        "clearable"?: boolean;
        /**
          * Main color of the password: see component principles
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * Indicates if the password is contrasted or not: see component principles
         */
        "contrasted"?: boolean;
        /**
          * Default value of the password
         */
        "defaultValue"?: string;
        /**
          * Indicates if the password is disabled or not: see component principles
         */
        "disabled"?: boolean;
        /**
          * Indicates if the password shows error or not
         */
        "error"?: boolean;
        /**
          * List of forbidden values for the password
         */
        "forbiddenValues"?: OdsFormForbiddenValues<number>;
        /**
          * Indicates if the password is inline or not
         */
        "inline"?: boolean;
        /**
          * Label of the password field
         */
        "label"?: string;
        /**
          * Indicates if the password is in loading state or not
         */
        "loading"?: boolean;
        /**
          * Indicates if the password is masked or not
         */
        "masked"?: boolean;
        /**
          * Name of the password field
         */
        "name"?: string;
        /**
          * Event triggered on textarea blur
         */
        "onOdsBlur"?: (event: OsdsPasswordCustomEvent<void>) => void;
        /**
          * Event triggered on textarea focus
         */
        "onOdsFocus"?: (event: OsdsPasswordCustomEvent<void>) => void;
        /**
          * The textarea value changed
         */
        "onOdsValueChange"?: (event: OsdsPasswordCustomEvent<OdsInputValueChangeEventDetail1>) => void;
        /**
          * Placeholder text for the password
         */
        "placeholder"?: string;
        /**
          * Indicates if the password is read-only or not
         */
        "readOnly"?: boolean;
        /**
          * Indicates if the password is required or not
         */
        "required"?: boolean;
        /**
          * Size of the password: see component principles
         */
        "size"?: ODS_INPUT_SIZE1;
        /**
          * Current value of the password
         */
        "value"?: string;
    }
    interface OsdsPhoneNumber {
        /**
          * Ability to clear the phone number value
         */
        "clearable"?: boolean;
        /**
          * A specific subset of countries to display in the select instead of the whole list
         */
        "countries"?: ODS_COUNTRY_ISO_CODE[] | ODS_PHONE_NUMBER_COUNTRY_PRESET | string;
        /**
          * Default value of the phone number
         */
        "defaultValue"?: string | null;
        /**
          * Indicates if the phone number is disabled or not
         */
        "disabled"?: boolean;
        /**
          * Indicates if the phone number shows error or not
         */
        "error"?: boolean;
        /**
          * Select value
         */
        "isoCode"?: ODS_COUNTRY_ISO_CODE;
        /**
          * This is the locale to use to translate the countries names
         */
        "locale"?: ODS_LOCALE;
        /**
          * Name of the phone number field
         */
        "name"?: string;
        /**
          * Event triggered on textarea blur
         */
        "onOdsBlur"?: (event: OsdsPhoneNumberCustomEvent<void>) => void;
        /**
          * Event triggered on textarea focus
         */
        "onOdsFocus"?: (event: OsdsPhoneNumberCustomEvent<void>) => void;
        /**
          * Send event with the input & the selected isoCode when the select value or the input value change
         */
        "onOdsValueChange"?: (event: OsdsPhoneNumberCustomEvent<OdsPhoneNumberValueChangeEventDetail>) => void;
        /**
          * Current value of the phone number
         */
        "value"?: string | null;
    }
    interface OsdsPopover {
    }
    interface OsdsPopoverContent {
    }
    interface OsdsProgressBar {
        /**
          * Sets the maximum value the progress can reach
          * @see OdsProgressBarAttributes.max
         */
        "max"?: number | undefined;
        /**
          * The value of the progress bar
          * @see OdsProgressBarAttributes.value
         */
        "value"?: number | undefined;
    }
    /**
     * create type that correspond to our input component.
     * doesn't work with :
     * ```
     * // not working
     * import '@ovhcloud/ods-stencil/components/button';
     * // not working
     * import '@ovhcloud/ods-stencil/components/input/dist/types/components';
     * // OK!
     * import { OsdsInput } from '@ovhcloud/ods-stencil/components/input/dist/types';
     * type HTMLOsdsInputElement = (OsdsInput & HTMLElement);
     * ```
     * with this, we cannot build
     * @ovhcloud /ods-components ("Component Tag Name "osds-input" Must Be Unique" error)
     */
    interface OsdsQuantity {
        /**
          * Quantity is disabled or not
         */
        "disabled"?: boolean;
    }
    interface OsdsRadio {
        /**
          * @see OdsRadioAttribute.afterSave
         */
        "afterSave"?: (({ checked, value }: { checked: boolean; value: string; }) => Promise<void>) | undefined;
        /**
          * The corresponding aria-label describing its content
          * @see OdsRadioAttribute.ariaLabel
         */
        "ariaLabel"?: string | null;
        /**
          * The id to an external description
          * @see OdsRadioAttribute.ariaLabelledby
         */
        "ariaLabelledby"?: string | undefined;
        /**
          * @see OdsRadioAttributes.beforeSave
         */
        "beforeSave"?: (({ checked, value }: { checked: boolean; value: string; }) => Promise<void>) | undefined;
        /**
          * The checked status of the radio
          * @see OdsRadioAttribute.checked
         */
        "checked"?: boolean;
        /**
          * is in state of awaiting the checked change
          * @see OdsRadioAttributes.checking
         */
        "checking"?: boolean;
        /**
          * Radio should be disabled or not
          * @see OdsRadioAttribute.disabled
         */
        "disabled"?: boolean;
        /**
          * The radio corresponding label
          * @see OdsRadioAttribute.label
         */
        "label"?: string;
        /**
          * The name corresponding to its parent radio group
          * @see OdsRadioAttribute.name
         */
        "name"?: string;
        /**
          * Event triggered on radio blur
          * @see OdsRadioEvent.odsBlur
         */
        "onOdsBlur"?: (event: OsdsRadioCustomEvent<void>) => void;
        /**
          * the checked state changed
          * @see OdsRadioEvent.odsCheckedChange
         */
        "onOdsCheckedChange"?: (event: OsdsRadioCustomEvent<OdsRadioCheckedChangeEventDetail>) => void;
        /**
          * the checked state is being changed
          * @see OdsRadioEvent.odsCheckingChange
         */
        "onOdsCheckingChange"?: (event: OsdsRadioCustomEvent<OdsRadioCheckingChangeEventDetail>) => void;
        /**
          * Event triggered on radio focus
          * @see OdsRadioEvent.odsFocus
         */
        "onOdsFocus"?: (event: OsdsRadioCustomEvent<void>) => void;
        /**
          * the radio value changed
          * @see OdsRadioEvent.odsValueChange
         */
        "onOdsValueChange"?: (event: OsdsRadioCustomEvent<{ checked: boolean, value: string }>) => void;
        /**
          * save input allow to set a function that returns a promise. It is called before each time an update is performed and allowing to manage pessimistic update strategy
          * @see OdsRadioAttribute.save
         */
        "save"?: (({ checked, value }: { checked: boolean; value: string; }) => Promise<void>) | undefined;
        /**
          * Its corresponding value
          * @see OdsRadioAttribute.value
         */
        "value"?: string;
    }
    interface OsdsRadioButton {
        /**
          * The checked status of the radio button
          * @see OdsRadioButtonAttributes.checked
         */
        "checked"?: boolean | undefined;
        /**
          * @see OdsRadioButtonAttributes.checking
         */
        "checking"?: boolean | undefined;
        /**
          * The color theme
          * @see OdsRadioButtonAttributes.color
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * Prevent the user from clicking on the radio button
          * @see OdsRadioButtonAttributes.disabled
         */
        "disabled"?: boolean | undefined;
        /**
          * Display a focus style (only if interactive)
          * @see OdsRadioButtonAttributes.hasFocus
         */
        "hasFocus"?: boolean | undefined;
        /**
          * Display an interactive style when clicking or hovering the radio button
          * @see OdsRadioButtonAttributes.interactive
         */
        "interactive"?: boolean | undefined;
        /**
          * Size of the radio button
          * @see OdsRadioButtonAttributes.size
         */
        "size"?: ODS_RADIO_BUTTON_SIZE;
    }
    interface OsdsRadioGroup {
        /**
          * @see OdsRadioGroupAttributes.afterSave
         */
        "afterSave"?: (({ value }: { value: string; }) => Promise<void>) | undefined;
        /**
          * @see OdsRadioGroupAttributes.beforeSave
         */
        "beforeSave"?: (({ value }: { value: string; }) => Promise<void>) | undefined;
        /**
          * Radio-group should be disabled or not
          * @see OdsRadioGroupAttributes.disabled
         */
        "disabled"?: boolean;
        /**
          * @see OdsRadioGroupAttributes.name
         */
        "name"?: string;
        /**
          * @see OdsRadioGroupEvents.odsDisabledChange
         */
        "onOdsDisabledChange"?: (event: OsdsRadioGroupCustomEvent<{ value: boolean }>) => void;
        /**
          * Emitted when the value has changed.
          * @see OdsRadioGroupEvents.odsValueChange
         */
        "onOdsValueChange"?: (event: OsdsRadioGroupCustomEvent<{ newValue?: string, previousValue?: string }>) => void;
        /**
          * If the radio selection is required or not
          * @see OdsRadioGroupAttributes.required
         */
        "required"?: boolean | undefined;
        /**
          * save input allow to set a function that returns a promise. It is called before each time an update is performed and allowing to manage pessimistic update strategy
          * @see OdsRadioGroupAttributes.save
         */
        "save"?: (({ value }: { value: string; }) => Promise<void>) | undefined;
        /**
          * @see OdsRadioGroupAttributes.value
         */
        "value"?: string;
    }
    interface OsdsRange {
        /**
          * Range color theme
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * Default value of the range
         */
        "defaultValue"?: OdsRangeValue;
        /**
          * Indicate if the range is entirely disabled. It means no interaction is possible (hover, click, focus, etc)
         */
        "disabled"?: boolean;
        /**
          * If the range is in error or not
         */
        "error"?: boolean;
        /**
          * Check range error state
         */
        "errorStateControl"?: OdsErrorStateControl;
        /**
          * The range forbidden values
         */
        "forbiddenValues"?: OdsFormForbiddenValues<number>;
        /**
          * The form control for range
         */
        "formControl"?: OdsFormControl<OdsValidityState>;
        /**
          * inline unit for range width
         */
        "inline"?: boolean;
        /**
          * The range maximum value
         */
        "max"?: number;
        /**
          * The range minimum value
         */
        "min"?: number;
        /**
          * Name of the range field
         */
        "name"?: string;
        /**
          * Event triggered on textarea blur
         */
        "onOdsBlur"?: (event: OsdsRangeCustomEvent<void>) => void;
        /**
          * Event triggered on textarea focus
         */
        "onOdsFocus"?: (event: OsdsRangeCustomEvent<void>) => void;
        /**
          * the range value changed
         */
        "onOdsValueChange"?: (event: OsdsRangeCustomEvent<OdsRangeValueChangeEventDetail>) => void;
        /**
          * The range step value
         */
        "step"?: number;
        /**
          * The range value
         */
        "value"?: OdsRangeValue;
    }
    interface OsdsSearchBar {
        /**
          * Indicates if the search-bar is contrasted or not: see component principles
         */
        "contrasted"?: boolean;
        /**
          * Indicates if the search-bar is disabled or not: see component principles
         */
        "disabled"?: boolean;
        /**
          * Indicates if the search-bar is in loading state or not
         */
        "loading"?: boolean;
        /**
          * Event triggered on textarea blur
         */
        "onOdsBlur"?: (event: OsdsSearchBarCustomEvent<void>) => void;
        /**
          * Event triggered on textarea focus
         */
        "onOdsFocus"?: (event: OsdsSearchBarCustomEvent<void>) => void;
        /**
          * Send event with the input value when click on button search ou with keyboard navigation
         */
        "onOdsSearchSubmit"?: (event: OsdsSearchBarCustomEvent<{ optionValue: string; inputValue: string }>) => void;
        /**
          * The textarea value changed
         */
        "onOdsValueChange"?: (event: OsdsSearchBarCustomEvent<OdsInputValueChangeEventDetail1>) => void;
        /**
          * List of the options on the select
         */
        "options"?: OdsSearchbarOption[];
        /**
          * Placeholder text for the search-bar
         */
        "placeholder"?: string;
        /**
          * Current value of the search-bar
         */
        "value"?: string;
    }
    interface OsdsSelect {
        /**
          * The corresponding aria-label describing its content
         */
        "ariaLabel"?: string | null;
        /**
          * The id to an external description
         */
        "ariaLabelledby"?: string;
        /**
          * the primary color of the theme
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * Its corresponding default value. It needs to match with one option so the option will be selected
         */
        "defaultValue"?: OdsInputValue;
        /**
          * indicates if the select is entirely disabled. it means no interactions (hover, click, focus, etc)
         */
        "disabled"?: boolean;
        /**
          * indicates if the select has an error.
         */
        "error"?: boolean | undefined;
        /**
          * full width or not: see component principles
         */
        "inline"?: boolean;
        /**
          * name of the select field
         */
        "name"?: string;
        /**
          * Event triggered on select blur
         */
        "onOdsBlur"?: (event: OsdsSelectCustomEvent<void>) => void;
        /**
          * Event triggered on select focus
         */
        "onOdsFocus"?: (event: OsdsSelectCustomEvent<void>) => void;
        /**
          * Emitted when the value has changed
         */
        "onOdsValueChange"?: (event: OsdsSelectCustomEvent<OdsSelectValueChangeEventDetail>) => void;
        /**
          * opened or not
         */
        "opened"?: boolean;
        /**
          * indicates if a value has to be selected
         */
        "required"?: boolean;
        /**
          * size: see component principles
         */
        "size"?: ODS_SELECT_SIZE;
        /**
          * Its corresponding value. It needs to correspond to the value of the option
         */
        "value"?: OdsInputValue;
    }
    interface OsdsSelectGroup {
    }
    interface OsdsSelectOption {
        /**
          * the select value changed
         */
        "onOdsSelectOptionClick"?: (event: OsdsSelectOptionCustomEvent<OdsSelectOptionClickEventDetail>) => void;
        /**
          * Whether or not it is the selected value (fetched from parent). UI only purpose
         */
        "selected"?: boolean;
        "value"?: OdsInputValue;
    }
    interface OsdsSkeleton {
        /**
          * inline or not: see component principles
         */
        "inline"?: boolean;
        /**
          * whether or not skeleton size is randomized
         */
        "randomized"?: boolean;
        /**
          * skeleton size
         */
        "size"?: ODS_SKELETON_SIZE;
    }
    interface OsdsSpinner {
        /**
          * contrasted or not: see component principles
          * @see OdsSpinnerAttributes.contrasted
         */
        "contrasted"?: boolean;
        /**
          * full width or not: see component principles
          * @see OdsSpinnerAttributes.inline
         */
        "inline"?: boolean;
        /**
          * choose between infinite or progress spinner (infinite only for now)
          * @see OdsSpinnerAttributes.mode
         */
        "mode"?: ODS_SPINNER_MODE;
        /**
          * size: see component principles
          * @see OdsSpinnerAttributes.size
         */
        "size"?: ODS_SPINNER_SIZE;
    }
    interface OsdsSwitch {
        /**
          * main color: see component principles
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * contrasted or not: see component principles
         */
        "contrasted"?: boolean;
        /**
          * disabled: see component principles
         */
        "disabled"?: boolean;
        /**
          * Event triggered on accordion toggle
         */
        "onOdsSwitchChanged"?: (event: OsdsSwitchCustomEvent<OdsSwitchChangedEventDetail>) => void;
        /**
          * size: see component principles
         */
        "size"?: ODS_SWITCH_SIZE;
        /**
          * used design aspect
         */
        "variant"?: ODS_SWITCH_VARIANT;
    }
    interface OsdsSwitchItem {
        /**
          * The checked status of the SwitchItem
         */
        "checked"?: boolean;
        /**
          * Its corresponding value
         */
        "value"?: HTMLInputElement['value'];
    }
    /**
     * assemble different item in a bar
     */
    interface OsdsTabBar {
        /**
          * Tabs size
          * @see OdsTabsAttributes.size
         */
        "size"?: ODS_TABS_SIZE;
    }
    /**
     * An Item that is part of the tab bar
     */
    interface OsdsTabBarItem {
        /**
          * is this tab item is selected or not
          * @see OdsTabBarItemAttributes.active
         */
        "active"?: boolean;
        /**
          * is in contrasted mode or not
          * @see OdsTabBarItemAttributes.contrasted
         */
        "contrasted"?: boolean;
        /**
          * The tab is disabled or not
          * @see OdsTabBarItemAttributes.disabled
         */
        "disabled"?: boolean;
        /**
          * Tab Bar item is selected
          * @see OdsTabBarItemEvents.odsTabItemSelectEvent
         */
        "onOdsTabItemSelectEvent"?: (event: OsdsTabBarItemCustomEvent<OdsTabItemSelectEventDetail>) => void;
        /**
          * The panel of the corresponding Tab
          * @see OdsTabBarItemAttributes.panel
         */
        "panel"?: string;
    }
    /**
     * Panel with content that has to be displayed when active
     */
    interface OsdsTabPanel {
        /**
          * is the panel active or not
          * @see OdsTabPanelAttributes.active
         */
        "active"?: boolean;
        /**
          * identifier name of the panel
          * @see OdsTabPanelAttributes.name
         */
        "name"?: string;
    }
    /**
     * Main tabs component
     */
    interface OsdsTabs {
        /**
          * The tab is contrasted
          * @see OdsTabsAttributes.contrasted
         */
        "contrasted"?: boolean;
        /**
          * The selected tab changed
          * @see OdsTabsEvents.odsTabsChanged
         */
        "onOdsTabsChanged"?: (event: OsdsTabsCustomEvent<OdsTabsChangeEventDetail>) => void;
        /**
          * Tabs active panel
          * @see OdsTabsAttributes.panel
         */
        "panel"?: string;
        /**
          * Tabs size
          * @see OdsTabsAttributes.size
         */
        "size"?: ODS_TABS_SIZE;
    }
    interface OsdsText {
        /**
          * If text handles break spaces or not
          * @see OdsTextAttribute.breakSpaces
         */
        "breakSpaces"?: boolean | undefined;
        /**
          * Text contrasted theme
          * @see OdsTextAttribute.color
         */
        "color"?: ODS_TEXT_COLOR_INTENT;
        /**
          * Text design as contrasted version
          * @see OdsTextAttribute.contrasted
         */
        "contrasted"?: boolean | undefined;
        /**
          * Text hue
          * @see OdsTextAttribute.hue
         */
        "hue"?: ODS_TEXT_COLOR_HUE;
        /**
          * Text level
          * @see OdsTextAttribute.level
         */
        "level"?: ODS_TEXT_LEVEL;
        /**
          * Text size
          * @see OdsTextAttribute.size
         */
        "size"?: ODS_TEXT_SIZE;
    }
    interface OsdsTextarea {
        /**
          * ariaLabel: see component principles
         */
        "ariaLabel"?: HTMLElement['ariaLabel'];
        /**
          * ariaLabelledby: see component principles
         */
        "ariaLabelledby"?: string;
        /**
          * main color: see component principles
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * cols: see component principles
         */
        "cols"?: number;
        /**
          * contrasted: see component principles
         */
        "contrasted"?: boolean;
        /**
          * defaultValue: see component principles
         */
        "defaultValue"?: string;
        /**
          * cols: see component principles
         */
        "disabled"?: boolean;
        /**
          * on error or not
         */
        "error"?: boolean;
        "errorStateControl"?: OdsErrorStateControl;
        /**
          * textarea form control
         */
        "formControl"?: OdsFormControl<OdsTextAreaValidityState>;
        /**
          * inline or not: see component principles
         */
        "inline"?: boolean;
        /**
          * name : see component principles
         */
        "name"?: string;
        /**
          * Event triggered on textarea blur
         */
        "onOdsBlur"?: (event: OsdsTextareaCustomEvent<void>) => void;
        /**
          * Event triggered on textarea focus
         */
        "onOdsFocus"?: (event: OsdsTextareaCustomEvent<void>) => void;
        /**
          * The textarea value changed
         */
        "onOdsValueChange"?: (event: OsdsTextareaCustomEvent<OdsTextAreaValueChangeEvent>) => void;
        /**
          * placeholder : see component principles
         */
        "placeholder"?: string;
        /**
          * readOnly or not : see component principles
         */
        "readOnly"?: boolean;
        /**
          * required or not : see component principles
         */
        "required"?: boolean;
        /**
          * resizable or not : see component principles
         */
        "resizable"?: boolean;
        /**
          * row: see component principles
         */
        "rows"?: number;
        /**
          * textarea size
         */
        "size"?: ODS_TEXTAREA_SIZE;
        /**
          * spellcheck: see component principles
         */
        "spellcheck"?: HTMLElement['spellcheck'];
        /**
          * textarea id
         */
        "textAreaId"?: string;
        /**
          * value: see component principles
         */
        "value"?: string;
    }
    interface OsdsTile {
        /**
          * If the tile is selected or not
         */
        "checked"?: boolean;
        /**
          * awaiting a change of checked state
         */
        "checking"?: boolean;
        /**
          * Tile color theme
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * disabled or not: see component principles
         */
        "disabled"?: boolean;
        /**
          * indicate if the tile has to be displayed in focused state
         */
        "hasFocus"?: boolean;
        /**
          * If the tile can have hoverable pseudo-classes or not
         */
        "hoverable"?: boolean;
        /**
          * inline or not: see component principles
         */
        "inline"?: boolean | undefined;
        /**
          * loading content state
         */
        "loading"?: boolean;
        /**
          * If the tile is rounded or not
         */
        "rounded"?: boolean;
        /**
          * Tile size
         */
        "size"?: ODS_TILE_SIZE;
        /**
          * Tile variant
         */
        "variant"?: ODS_TILE_VARIANT;
    }
    interface OsdsToggle {
        /**
          * Toggle is checked or not
          * @see OdsToggleAttributes.checked
         */
        "checked"?: boolean | undefined;
        /**
          * Awaiting a change of checked state
          * @see OdsToggleAttributes.checking
         */
        "checking"?: boolean | undefined;
        /**
          * Toggle color theme
          * @see OdsToggleAttributes.color
         */
        "color"?: ODS_THEME_COLOR_INTENT;
        /**
          * Toggle is in contrasted mode or not
          * @see OdsToggleAttributes.contrasted
         */
        "contrasted"?: boolean | undefined;
        /**
          * Toggle is disabled or not
          * @see OdsToggleAttributes.disabled
         */
        "disabled"?: boolean | undefined;
        /**
          * If the toggle can have interactive pseudo-classes or not
          * @see OdsToggleAttributes.interactive
         */
        "interactive"?: boolean | undefined;
    }
    interface OsdsTooltip {
        /**
          * with or without visible tip: see component principles
          * @see OdsTooltipAttributes.variant
         */
        "variant"?: ODS_TOOLTIP_VARIANT;
    }
    interface OsdsTooltipContent {
    }
    interface IntrinsicElements {
        "osds-accordion": OsdsAccordion;
        "osds-accordion-group": OsdsAccordionGroup;
        "osds-breadcrumb": OsdsBreadcrumb;
        "osds-breadcrumb-item": OsdsBreadcrumbItem;
        "osds-button": OsdsButton;
        "osds-cart": OsdsCart;
        "osds-cart-footer": OsdsCartFooter;
        "osds-cart-footer-item": OsdsCartFooterItem;
        "osds-cart-header": OsdsCartHeader;
        "osds-cart-item": OsdsCartItem;
        "osds-cart-item-option": OsdsCartItemOption;
        "osds-cart-manager": OsdsCartManager;
        "osds-cart-section": OsdsCartSection;
        "osds-cart-total": OsdsCartTotal;
        "osds-checkbox": OsdsCheckbox;
        "osds-checkbox-button": OsdsCheckboxButton;
        "osds-chip": OsdsChip;
        "osds-clipboard": OsdsClipboard;
        "osds-code": OsdsCode;
        "osds-collapsible": OsdsCollapsible;
        "osds-content-addon": OsdsContentAddon;
        "osds-datagrid": OsdsDatagrid;
        "osds-datepicker": OsdsDatepicker;
        "osds-divider": OsdsDivider;
        "osds-flag": OsdsFlag;
        "osds-form-field": OsdsFormField;
        "osds-icon": OsdsIcon;
        "osds-input": OsdsInput;
        "osds-link": OsdsLink;
        "osds-medium": OsdsMedium;
        "osds-menu": OsdsMenu;
        "osds-menu-group": OsdsMenuGroup;
        "osds-menu-item": OsdsMenuItem;
        "osds-message": OsdsMessage;
        "osds-modal": OsdsModal;
        "osds-pagination": OsdsPagination;
        "osds-password": OsdsPassword;
        "osds-phone-number": OsdsPhoneNumber;
        "osds-popover": OsdsPopover;
        "osds-popover-content": OsdsPopoverContent;
        "osds-progress-bar": OsdsProgressBar;
        "osds-quantity": OsdsQuantity;
        "osds-radio": OsdsRadio;
        "osds-radio-button": OsdsRadioButton;
        "osds-radio-group": OsdsRadioGroup;
        "osds-range": OsdsRange;
        "osds-search-bar": OsdsSearchBar;
        "osds-select": OsdsSelect;
        "osds-select-group": OsdsSelectGroup;
        "osds-select-option": OsdsSelectOption;
        "osds-skeleton": OsdsSkeleton;
        "osds-spinner": OsdsSpinner;
        "osds-switch": OsdsSwitch;
        "osds-switch-item": OsdsSwitchItem;
        "osds-tab-bar": OsdsTabBar;
        "osds-tab-bar-item": OsdsTabBarItem;
        "osds-tab-panel": OsdsTabPanel;
        "osds-tabs": OsdsTabs;
        "osds-text": OsdsText;
        "osds-textarea": OsdsTextarea;
        "osds-tile": OsdsTile;
        "osds-toggle": OsdsToggle;
        "osds-tooltip": OsdsTooltip;
        "osds-tooltip-content": OsdsTooltipContent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "osds-accordion": LocalJSX.OsdsAccordion & JSXBase.HTMLAttributes<HTMLOsdsAccordionElement>;
            "osds-accordion-group": LocalJSX.OsdsAccordionGroup & JSXBase.HTMLAttributes<HTMLOsdsAccordionGroupElement>;
            "osds-breadcrumb": LocalJSX.OsdsBreadcrumb & JSXBase.HTMLAttributes<HTMLOsdsBreadcrumbElement>;
            "osds-breadcrumb-item": LocalJSX.OsdsBreadcrumbItem & JSXBase.HTMLAttributes<HTMLOsdsBreadcrumbItemElement>;
            "osds-button": LocalJSX.OsdsButton & JSXBase.HTMLAttributes<HTMLOsdsButtonElement>;
            "osds-cart": LocalJSX.OsdsCart & JSXBase.HTMLAttributes<HTMLOsdsCartElement>;
            "osds-cart-footer": LocalJSX.OsdsCartFooter & JSXBase.HTMLAttributes<HTMLOsdsCartFooterElement>;
            "osds-cart-footer-item": LocalJSX.OsdsCartFooterItem & JSXBase.HTMLAttributes<HTMLOsdsCartFooterItemElement>;
            "osds-cart-header": LocalJSX.OsdsCartHeader & JSXBase.HTMLAttributes<HTMLOsdsCartHeaderElement>;
            "osds-cart-item": LocalJSX.OsdsCartItem & JSXBase.HTMLAttributes<HTMLOsdsCartItemElement>;
            "osds-cart-item-option": LocalJSX.OsdsCartItemOption & JSXBase.HTMLAttributes<HTMLOsdsCartItemOptionElement>;
            "osds-cart-manager": LocalJSX.OsdsCartManager & JSXBase.HTMLAttributes<HTMLOsdsCartManagerElement>;
            "osds-cart-section": LocalJSX.OsdsCartSection & JSXBase.HTMLAttributes<HTMLOsdsCartSectionElement>;
            "osds-cart-total": LocalJSX.OsdsCartTotal & JSXBase.HTMLAttributes<HTMLOsdsCartTotalElement>;
            "osds-checkbox": LocalJSX.OsdsCheckbox & JSXBase.HTMLAttributes<HTMLOsdsCheckboxElement>;
            "osds-checkbox-button": LocalJSX.OsdsCheckboxButton & JSXBase.HTMLAttributes<HTMLOsdsCheckboxButtonElement>;
            "osds-chip": LocalJSX.OsdsChip & JSXBase.HTMLAttributes<HTMLOsdsChipElement>;
            "osds-clipboard": LocalJSX.OsdsClipboard & JSXBase.HTMLAttributes<HTMLOsdsClipboardElement>;
            "osds-code": LocalJSX.OsdsCode & JSXBase.HTMLAttributes<HTMLOsdsCodeElement>;
            "osds-collapsible": LocalJSX.OsdsCollapsible & JSXBase.HTMLAttributes<HTMLOsdsCollapsibleElement>;
            "osds-content-addon": LocalJSX.OsdsContentAddon & JSXBase.HTMLAttributes<HTMLOsdsContentAddonElement>;
            "osds-datagrid": LocalJSX.OsdsDatagrid & JSXBase.HTMLAttributes<HTMLOsdsDatagridElement>;
            "osds-datepicker": LocalJSX.OsdsDatepicker & JSXBase.HTMLAttributes<HTMLOsdsDatepickerElement>;
            "osds-divider": LocalJSX.OsdsDivider & JSXBase.HTMLAttributes<HTMLOsdsDividerElement>;
            "osds-flag": LocalJSX.OsdsFlag & JSXBase.HTMLAttributes<HTMLOsdsFlagElement>;
            "osds-form-field": LocalJSX.OsdsFormField & JSXBase.HTMLAttributes<HTMLOsdsFormFieldElement>;
            "osds-icon": LocalJSX.OsdsIcon & JSXBase.HTMLAttributes<HTMLOsdsIconElement>;
            "osds-input": LocalJSX.OsdsInput & JSXBase.HTMLAttributes<HTMLOsdsInputElement>;
            "osds-link": LocalJSX.OsdsLink & JSXBase.HTMLAttributes<HTMLOsdsLinkElement>;
            "osds-medium": LocalJSX.OsdsMedium & JSXBase.HTMLAttributes<HTMLOsdsMediumElement>;
            "osds-menu": LocalJSX.OsdsMenu & JSXBase.HTMLAttributes<HTMLOsdsMenuElement>;
            "osds-menu-group": LocalJSX.OsdsMenuGroup & JSXBase.HTMLAttributes<HTMLOsdsMenuGroupElement>;
            "osds-menu-item": LocalJSX.OsdsMenuItem & JSXBase.HTMLAttributes<HTMLOsdsMenuItemElement>;
            "osds-message": LocalJSX.OsdsMessage & JSXBase.HTMLAttributes<HTMLOsdsMessageElement>;
            "osds-modal": LocalJSX.OsdsModal & JSXBase.HTMLAttributes<HTMLOsdsModalElement>;
            "osds-pagination": LocalJSX.OsdsPagination & JSXBase.HTMLAttributes<HTMLOsdsPaginationElement>;
            "osds-password": LocalJSX.OsdsPassword & JSXBase.HTMLAttributes<HTMLOsdsPasswordElement>;
            "osds-phone-number": LocalJSX.OsdsPhoneNumber & JSXBase.HTMLAttributes<HTMLOsdsPhoneNumberElement>;
            "osds-popover": LocalJSX.OsdsPopover & JSXBase.HTMLAttributes<HTMLOsdsPopoverElement>;
            "osds-popover-content": LocalJSX.OsdsPopoverContent & JSXBase.HTMLAttributes<HTMLOsdsPopoverContentElement>;
            "osds-progress-bar": LocalJSX.OsdsProgressBar & JSXBase.HTMLAttributes<HTMLOsdsProgressBarElement>;
            /**
             * create type that correspond to our input component.
             * doesn't work with :
             * ```
             * // not working
             * import '@ovhcloud/ods-stencil/components/button';
             * // not working
             * import '@ovhcloud/ods-stencil/components/input/dist/types/components';
             * // OK!
             * import { OsdsInput } from '@ovhcloud/ods-stencil/components/input/dist/types';
             * type HTMLOsdsInputElement = (OsdsInput & HTMLElement);
             * ```
             * with this, we cannot build
             * @ovhcloud /ods-components ("Component Tag Name "osds-input" Must Be Unique" error)
             */
            "osds-quantity": LocalJSX.OsdsQuantity & JSXBase.HTMLAttributes<HTMLOsdsQuantityElement>;
            "osds-radio": LocalJSX.OsdsRadio & JSXBase.HTMLAttributes<HTMLOsdsRadioElement>;
            "osds-radio-button": LocalJSX.OsdsRadioButton & JSXBase.HTMLAttributes<HTMLOsdsRadioButtonElement>;
            "osds-radio-group": LocalJSX.OsdsRadioGroup & JSXBase.HTMLAttributes<HTMLOsdsRadioGroupElement>;
            "osds-range": LocalJSX.OsdsRange & JSXBase.HTMLAttributes<HTMLOsdsRangeElement>;
            "osds-search-bar": LocalJSX.OsdsSearchBar & JSXBase.HTMLAttributes<HTMLOsdsSearchBarElement>;
            "osds-select": LocalJSX.OsdsSelect & JSXBase.HTMLAttributes<HTMLOsdsSelectElement>;
            "osds-select-group": LocalJSX.OsdsSelectGroup & JSXBase.HTMLAttributes<HTMLOsdsSelectGroupElement>;
            "osds-select-option": LocalJSX.OsdsSelectOption & JSXBase.HTMLAttributes<HTMLOsdsSelectOptionElement>;
            "osds-skeleton": LocalJSX.OsdsSkeleton & JSXBase.HTMLAttributes<HTMLOsdsSkeletonElement>;
            "osds-spinner": LocalJSX.OsdsSpinner & JSXBase.HTMLAttributes<HTMLOsdsSpinnerElement>;
            "osds-switch": LocalJSX.OsdsSwitch & JSXBase.HTMLAttributes<HTMLOsdsSwitchElement>;
            "osds-switch-item": LocalJSX.OsdsSwitchItem & JSXBase.HTMLAttributes<HTMLOsdsSwitchItemElement>;
            /**
             * assemble different item in a bar
             */
            "osds-tab-bar": LocalJSX.OsdsTabBar & JSXBase.HTMLAttributes<HTMLOsdsTabBarElement>;
            /**
             * An Item that is part of the tab bar
             */
            "osds-tab-bar-item": LocalJSX.OsdsTabBarItem & JSXBase.HTMLAttributes<HTMLOsdsTabBarItemElement>;
            /**
             * Panel with content that has to be displayed when active
             */
            "osds-tab-panel": LocalJSX.OsdsTabPanel & JSXBase.HTMLAttributes<HTMLOsdsTabPanelElement>;
            /**
             * Main tabs component
             */
            "osds-tabs": LocalJSX.OsdsTabs & JSXBase.HTMLAttributes<HTMLOsdsTabsElement>;
            "osds-text": LocalJSX.OsdsText & JSXBase.HTMLAttributes<HTMLOsdsTextElement>;
            "osds-textarea": LocalJSX.OsdsTextarea & JSXBase.HTMLAttributes<HTMLOsdsTextareaElement>;
            "osds-tile": LocalJSX.OsdsTile & JSXBase.HTMLAttributes<HTMLOsdsTileElement>;
            "osds-toggle": LocalJSX.OsdsToggle & JSXBase.HTMLAttributes<HTMLOsdsToggleElement>;
            "osds-tooltip": LocalJSX.OsdsTooltip & JSXBase.HTMLAttributes<HTMLOsdsTooltipElement>;
            "osds-tooltip-content": LocalJSX.OsdsTooltipContent & JSXBase.HTMLAttributes<HTMLOsdsTooltipContentElement>;
        }
    }
}
