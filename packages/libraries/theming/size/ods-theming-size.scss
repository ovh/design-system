@import './ods-size-definitions';
@import '../globals/globals';

/// @access public
@function ods-get-component-size-definition($size-definitions, $component-name) {
  @return map_get($size-definitions, $component-name);
}

/// @access public
@function ods-get-size-properties($component-size-definition, $size-name) {
  @return map-get($component-size-definition, $size-name);
}

/// get a size property
/// @access public
@function ods-get-size-property($size-properties, $size-property) {
  @return map-get($size-properties, $size-property);
}

/// @access private
@function ods-check-wanted-component-size-config($component-name, $wanted-size-config) {

  @if (not map-has-key($ods-size-definitions, $component-name)) {
    @error 'the component=#{$component-name} is not an ODS component';
  }

  $template: map-get($ods-size-definitions, $component-name);

  @if ($DEBUG) {
    @debug "$template", $template;
  }

  @each $size-name, $size in $template {
    @if (not map-has-key($wanted-size-config, $size-name)) {
      @error 'you forgot to define the size=#{$size-name} for the component=#{$component-name}';
    }
    $wanted-size: map-get($wanted-size-config, $size-name);
    @each $property, $value in $size {
      @if (not map-has-key($wanted-size, $property)) {
        @error 'you forgot to define the property=#{$property} for size=#{$size-name} for the component=#{$component-name}';
      }
    }
  }
  @return '';
}

/// @access private
@function ods-create-component-size-config($component-name, $wanted-size-config) {
  $dummy: ods-check-wanted-component-size-config($component-name, $wanted-size-config);
  @return $wanted-size-config;
}

/// @access public
@function ods-create-size-config(
  $accordion,
  $breadcrumb,
  $button,
  $cart,
  $checkbox-button,
  $chip,
  $code,
  $divider,
  $icon,
  $input,
  $pagination,
  $radio-button,
  $range,
  $select,
  $skeleton,
  $spinner,
  $tabs,
  $textarea,
  $tile,
  $toggle
) {
  @return (
    accordion: ods-create-component-size-config(accordion, $accordion),
    breadcrumb: ods-create-component-size-config(breadcrumb, $breadcrumb),
    button: ods-create-component-size-config(button, $button),
    cart: ods-create-component-size-config(cart, $cart),
    checkbox-button: ods-create-component-size-config(checkbox-button, $checkbox-button),
    chip: ods-create-component-size-config(chip, $chip),
    code: ods-create-component-size-config(code, $code),
    divider: ods-create-component-size-config(divider, $divider),
    icon: ods-create-component-size-config(icon, $icon),
    input: ods-create-component-size-config(input, $input),
    pagination: ods-create-component-size-config(pagination, $pagination),
    radio-button: ods-create-component-size-config(radio-button, $radio-button),
    range: ods-create-component-size-config(range, $range),
    select: ods-create-component-size-config(select, $select),
    skeleton: ods-create-component-size-config(skeleton, $skeleton),
    spinner: ods-create-component-size-config(spinner, $spinner),
    tabs: ods-create-component-size-config(tabs, $tabs),
    textarea: ods-create-component-size-config(textarea, $textarea),
    tile: ods-create-component-size-config(tile, $tile),
    toggle: ods-create-component-size-config(toggle, $toggle),
  );
}


/// @access private
@mixin ods-set-size-config($size-config) {
  @each $component-name, $size-component-config in $size-config {
    @each $size-name, $size-config in $size-component-config {
      @each $property-name, $value in $size-config {
        $variable: --ods-size-#{$component-name}-#{$size-name}-#{$property-name};
        #{$variable}: $value;
      }
    }
  }
}
