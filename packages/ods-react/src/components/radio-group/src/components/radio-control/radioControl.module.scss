@use '../../../../../style/focus';
@use '../../../../../style/radio';
@use '../../../../../style/state';

@layer ods-atoms {
  .radio-control {
    @include radio.ods-radio();

    &:not([data-disabled]) {
      &:not([data-invalid]) {
        &:hover {
          border-color: var(--ods-color-form-element-border-hover-default); // use --ods-theme-input-....
        }

        &[data-focus] {
          border-color: var(--ods-color-form-element-border-focus-default);// use --ods-theme-input-....
        }
      }

      &[data-state="checked"] {
        border-color: var(--ods-color-primary-500); // --ods-theme-input-border-color-checked
        background-color: var(--ods-color-primary-500); // --ods-theme-input-background-color-checked

        &::before {
          transform: scale(1);
        }

        &[data-focus],
        &:hover {
          border-color: var(--ods-color-primary-700); // use --ods-theme-input-....
          background: var(--ods-color-primary-700); // use --ods-theme-input-....
        }

        &[data-invalid] {
          border-color: var(--ods-color-form-element-border-critical); // use --ods-theme-input-....
          background-color: var(--ods-color-form-element-background-selected-critical); // use --ods-theme-input-....
        }
      }
    }

    &[data-disabled] {
      @include state.ods-is-disabled();

      &[data-state="checked"] {
        &::before {
          transform: scale(1);
          background-color: state.$ods-state-is-disabled-text-color;
        }
      }
    }

    &[data-focus] {
      @include focus.ods-focus();
    }

    &[data-invalid] {
      border-color: var(--ods-color-form-element-border-critical); // use --ods-theme-input-....
    }
  }
}
