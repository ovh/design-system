@use '../../../../../style/checkbox';
@use '../../../../../style/focus';
@use '../../../../../style/icon';
@use '../../../../../style/input';
@use '../../../../../style/overlay';
@use '../../../../../style/state';
@import '~tom-select/dist/css/tom-select.bootstrap4.min.css';

$select-background-color: #fff;
$select-caret-size: 14px;
$select-base-padding: 8px;
$select-padding-right: $select-caret-size + ($select-base-padding * 2);

@mixin ods-select-item() {
  color: var(--ods-color-text);
}

@mixin ods-select-placeholder() {
  white-space: nowrap;
  color: input.$ods-input-placeholder-color;
}

:host(.ods-select) {
  .ts-control {
    border: solid 1px var(--ods-color-neutral-300);
    border-radius: 0;
    background-color: $select-background-color;
    cursor: pointer;
    padding: 0 $select-padding-right 0 $select-base-padding !important;
    height: input.$ods-input-input-height;
    min-height: auto;

    &:hover {
      border-color: var(--ods-color-form-element-border-hover-default);
    }

    .item {
      @include ods-select-item();
    }
  }

  .disabled {
    .ts-control {
      @include state.ods-is-disabled();

      opacity: 1;
      cursor: not-allowed !important;

      * {
        cursor: not-allowed !important;
        color: inherit !important;
      }
    }
  }

  .dropdown-active.focus {
    .ts-control {
      box-shadow: none;
    }
  }

  :not(.dropdown-active).focus {
    .ts-control {
      @include focus.ods-focus();

      border-color: var(--ods-color-form-element-border-focus-default);
      box-shadow: none;
      cursor: pointer;
    }
  }

  .ts-dropdown {
    z-index: overlay.$ods-overlay-z-index - 1;
    margin: 0;
    box-shadow: none;

    &.ods-select__dropdown--bottom {
      border-radius: 0 0 var(--ods-border-radius-sm) var(--ods-border-radius-sm);
    }

    &.ods-select__dropdown--top {
      border-radius: var(--ods-border-radius-sm) var(--ods-border-radius-sm) 0 0;
    }
  }

  .ts-dropdown-content {
    padding: 0;

    .option {
      display: flex;
      align-items: center;
      padding: 0 8px;
      min-height: input.$ods-input-input-height;
      color: var(--ods-color-text);

      &:not([data-selectable]) {
        @include state.ods-is-disabled();

        opacity: 1;
      }

      &[data-selectable]:hover,
      &.active {
        background-color: var(--ods-color-primary-100);
      }

      &.selected {
        background-color: var(--ods-color-primary-050);

        &:not([data-selectable]) {
          background: var(--ods-color-neutral-200);
          color: var(--ods-color-primary-000);
        }

        &.active {
          background-color: var(--ods-color-primary-100);
        }
      }
    }

    .optgroup {
      &::before {
        margin: 0;
      }

      &[data-disabled] {
        .optgroup-header {
          @include state.ods-is-disabled();

          opacity: 1;
        }

        .option {
          @include state.ods-is-disabled();

          opacity: 1;

          &:hover {
            background-color: state.$ods-state-is-disabled-background-color;
          }
        }
      }

      .optgroup-header {
        display: flex;
        align-items: center;
        background-color: inherit;
        padding: 0 8px;
        min-height: input.$ods-input-input-height;
        color: var(--ods-color-heading);
        font-size: 1rem;
        font-weight: 600;
      }

      .option {
        padding-left: 24px;
      }
    }

    .tomselect-checkbox {
      @include checkbox.ods-checkbox();

      margin-right: 8px;
      min-width: checkbox.$ods-checkbox-size;
    }
  }

  .ts-placeholder {
    @include ods-select-placeholder();
  }

  .plugin-merge_selected_items {
    .ts-merged-items {
      @include ods-select-item();

      margin: 0;
      background: $select-background-color;
      cursor: pointer;
      padding: 0;
      white-space: nowrap;

      &__count {
        color: var(--ods-color-primary-500);
        font-weight: 700;
      }
    }

    .ts-merged-items-placeholder {
      @include ods-select-placeholder();
    }
  }

  .ts-wrapper {
    &.multi,
    &.single {
      .ts-control {
        &::after {
          @include icon.ods-icon();

          position: absolute;
          right: 0;
          margin: 0;
          border: none;
          background-color: inherit;
          padding: $select-base-padding;
          width: auto;
          height: auto;
          color: var(--ods-color-primary-500);
          font-size: $select-caret-size;
          content: '\e917';
        }
      }

      &.dropdown-active {
        .ts-control {
          cursor: pointer;

          &::after {
            content: '\e91a';
          }
        }
      }

      &.disabled {
        .ts-control {
          &::after {
            color: var(--ods-color-neutral-600);
          }
        }

        .ts-merged-items {
          @include state.ods-is-disabled();
        }
      }
    }

    &.single {
      .ts-control {
        &::after {
          transform: translateY(-50%);
        }
      }
    }

    &.multi {
      &.plugin-placeholder {
        .ts-placeholder {
          // As we use the merge plugin, we enforce the placeholder from other plugin to be hidden
          display: none !important;
        }
      }
    }

    &.locked {
      .ts-control {
        @include state.ods-is-readonly();

        cursor: default;

        &::after {
          color: var(--ods-color-neutral-500);
        }

        .ts-merged-items {
          background: var(--ods-color-neutral-050);

          &__count {
            color: var(--ods-color-text);
            font-weight: 700;
          }
        }
      }
    }
  }
}

:host(.ods-select--border-rounded-all) {
  .ts-control {
    border-radius: var(--ods-border-radius-sm);
  }
}

:host(.ods-select--border-rounded-bottom) {
  .ts-control {
    border-bottom-left-radius: var(--ods-border-radius-sm);
    border-bottom-right-radius: var(--ods-border-radius-sm);
  }
}

:host(.ods-select--border-rounded-bottom-left) {
  .ts-control {
    border-bottom-left-radius: var(--ods-border-radius-sm);
  }
}

:host(.ods-select--border-rounded-bottom-right) {
  .ts-control {
    border-bottom-right-radius: var(--ods-border-radius-sm);
  }
}

:host(.ods-select--border-rounded-left) {
  .ts-control {
    border-top-left-radius: var(--ods-border-radius-sm);
    border-bottom-left-radius: var(--ods-border-radius-sm);
  }
}

:host(.ods-select--border-rounded-right) {
  .ts-control {
    border-top-right-radius: var(--ods-border-radius-sm);
    border-bottom-right-radius: var(--ods-border-radius-sm);
  }
}

:host(.ods-select--border-rounded-top) {
  .ts-control {
    border-top-left-radius: var(--ods-border-radius-sm);
    border-top-right-radius: var(--ods-border-radius-sm);
  }
}

:host(.ods-select--border-rounded-top-left) {
  .ts-control {
    border-top-left-radius: var(--ods-border-radius-sm);
  }
}

:host(.ods-select--border-rounded-top-right) {
  .ts-control {
    border-top-right-radius: var(--ods-border-radius-sm);
  }
}

:host(.ods-select--dropdown-width-auto) {
  .ts-dropdown {
    width: auto;
  }
}

// Double class to give more weight than base override
:host(:not(.ods-select--disabled).ods-select.ods-select--error) {
  .ts-control {
    @include input.ods-input-error();
  }
}
