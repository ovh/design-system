@import "./sizes";

/**
 * SPACING CONCEPTS
 *
 * - Stack concept: the vertical space between two elements (like carriage return)
 * - Inline concept: the horizontal space between two elements (like a tab)
 * - Inset concept: the space between the border and the content
 *    3 categories inside this concept:
 *    - Inset: an even space between the border and the content
 *    - Squish: an uneven space between the border and the content where left and right spaces are twice the size of
 *    the top and bottom
 *    - Stretch: an uneven space between the border and the content where left and right spaces are half the size of
 *    the top and bottom
 * - Border radius: the rounded property applied to the border of a component
 */

$stack-concept: $sizes;
$inline-concept: (
        "01": map-get($sizes, "01"), // 1px
        "02": map-get($sizes, "02"), // 2px
        "03": map-get($sizes, "03"), // 4px
        "04": map-get($sizes, "04"), // 8px
        "05": map-get($sizes, "05"), // 12px
        "06": map-get($sizes, "06"), // 16px
        "07": map-get($sizes, "07"), // 20px
        "08": map-get($sizes, "08")  // 24px
);
$inset-concept: $inline-concept;
$squish-concept: $inset-concept;
$stretch-concept: $inset-concept;
$border-radius-concept: (
        "01": map-get($sizes, "03"), // 4px
        "02": map-get($sizes, "04"), // 8px
        "03": map-get($sizes, "06")  // 16px
);

/* stylelint-disable function-calc-no-unspaced-operator */
:root {
  @each $size, $value in $stack-concept {
    $result: calc(#{$size-base * $value}rem * var(--ods-size-ratio));

    @if ($size == "06") {
      --ods-size-stack-default: #{$result};
      --ods-size-stack-n-default: calc(-1 * var(--ods-size-stack-default));
    }

    --ods-size-stack-#{$size}: #{$result};
    --ods-size-stack-n-#{$size}: calc(-1 * #{$result});
  }

  @each $size, $value in $inline-concept {
    $result: calc(#{$size-base * $value}rem * var(--ods-size-ratio));

    @if ($size == "06") {
      --ods-size-inline-default: #{$result};
      --ods-size-inline-n-default: calc(-1 * var(--ods-size-inline-default));
    }

    --ods-size-inline-#{$size}: #{$result};
    --ods-size-inline-n-#{$size}: calc(-1 * #{$result});
  }

  @each $size, $value in $inset-concept {
    $result: calc(#{$size-base * $value}rem * var(--ods-size-ratio));

    @if ($size == "06") {
      --ods-size-inset-default: #{$result};
      --ods-size-inset-default-x: #{$result};
      --ods-size-inset-default-y: #{$result};
      --ods-size-inset-n-default: calc(-1 * var(--ods-size-inset-default));
    }

    --ods-size-inset-#{$size}: #{$result};
    --ods-size-inset-#{$size}-x: #{$result};
    --ods-size-inset-#{$size}-y: #{$result};
    --ods-size-inset-n-#{$size}: calc(-1 * #{$result});
  }

  @each $size, $value in $squish-concept {
    $result: calc(#{$size-base * $value}rem * var(--ods-size-ratio));
    $larger-result: calc(#{$size-base * $value * 1.5}rem * var(--ods-size-ratio));

    @if ($size == "06") {
      --ods-size-squish-default: #{$result} #{$larger-result};
      --ods-size-squish-default-x: #{$larger-result};
      --ods-size-squish-default-y: #{$result};
      --ods-size-squish-n-default: calc(-1 * #{$result}) calc(-1 * #{$larger-result});
    }

    --ods-size-squish-#{$size}: #{$result} #{$larger-result};
    --ods-size-squish-#{$size}-x: #{$larger-result};
    --ods-size-squish-#{$size}-y: #{$result};
    --ods-size-squish-n-#{$size}: calc(-1 * #{$result}) calc(-1 * #{$larger-result});
  }

  @each $size, $value in $stretch-concept {
    $result: calc(#{$size-base * $value}rem * var(--ods-size-ratio));
    $larger-result: calc(#{$size-base * $value * 1.5}rem * var(--ods-size-ratio));

    @if ($size == "06") {
      --ods-size-stretch-default: #{$larger-result} #{$result};
      --ods-size-stretch-default-x: #{$result};
      --ods-size-stretch-default-y: #{$larger-result};
      --ods-size-stretch-n-default: calc(-1 * #{$larger-result}) calc(-1 * #{$result});
    }

    --ods-size-stretch-#{$size}: #{$larger-result} #{$result};
    --ods-size-stretch-#{$size}-x: #{$result};
    --ods-size-stretch-#{$size}-y: #{$larger-result};
    --ods-size-stretch-n-#{$size}: calc(-1 * #{$larger-result}) calc(-1 * #{$result});
  }

  @each $size, $value in $border-radius-concept {
    $result: calc(#{$size-base * $value}rem * var(--ods-size-ratio));

    @if ($size == "06") {
      --ods-size-border-radius-default: #{$result};
    }

    --ods-size-border-radius-#{$size}: #{$result};
  }
}
